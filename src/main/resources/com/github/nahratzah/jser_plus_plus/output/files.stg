fwdHeaderFile(codeGen, includes) ::= <<
#ifndef JAVA_FWD_$codeGen.includeGuard$
#define JAVA_FWD_$codeGen.includeGuard$

///\file
///\brief Forward declarations for $codeGen.baseType; separator = "."$
///\note Include <$codeGen.headerName$> instead.

#include <cstddef>
#include <java/_accessor.h>
#include <java/ref.h>
#include <java/inline.h>

// Forward declare all erased types.
namespace $["java", "_erased", codeGen.namespace]; separator = "::"$ {

$codeGen.types:{cdef|class $cdef.className$;}; separator = "\n"$

} /* namespace $["java", "_erased", codeGen.namespace]; separator = "::"$ */

// Declare all tags.
namespace $["java", "_tags", codeGen.namespace]; separator = "::"$ {

$codeGen.types:{cdef|$tagDeclaration(cdef)$}; separator = "\n\n"$

} /* namespace $["java", "_tags", codeGen.namespace]; separator = "::"$ */

// Forward declare accessors.
namespace java {

$codeGen.types:{cdef|$forwardDeclareAccessor(cdef)$; // Forward declaration.}; separator = "\n\n"$

} /* namespace java */

$if (codeGen.namespace)$
namespace $codeGen.namespace; separator = "::"$ {

$endif$
$codeGen.types:{cdef|$declareBasicRef(cdef)$}; separator = "\n"$
$if (codeGen.namespace)$

} /* namespace $codeGen.namespace; separator = "::"$ */
$endif$

$includes:{f|$include(f)$}; separator = "\n"$

// render accessors
namespace java {

$codeGen.types:{cdef|$accessor(cdef)$}; separator = "\n\n"$

} /* namespace java */

#endif /* JAVA_FWD_$codeGen.includeGuard$ */

>>


headerFile(codeGen, includes) ::= <<
#ifndef $codeGen.includeGuard$
#define $codeGen.includeGuard$

$include(codeGen.fwdHeaderName)$

///\file
///\brief Code for $codeGen.baseType; separator = "."$

$includes:{f|$include(f)$}; separator = "\n"$

// render erased types
namespace $["java", "_erased", codeGen.namespace]; separator = "::"$ {

$codeGen.reorderTypesForInheritance:{cdef|$class(cdef)$}; separator = "\n\n"$

} /* namespace $["java", "_erased", codeGen.namespace]; separator = "::"$ */

// render accessors
namespace java {

$codeGen.types:{cdef|$accessorImpl(cdef)$}; separator = "\n\n"$

} /* namespace java */

#endif /* $codeGen.includeGuard$ */

>>


srcFile(codeGen, includes) ::= <<
$[codeGen.headerName, includes]:{f|$include(f)$}; separator = "\n"$

namespace $["java", "_erased", codeGen.namespace]; separator = "::"$ {

$codeGen.types:{cdef|$classImpl(cdef)$}; separator = "\n\n"$

} /* namespace $["java", "_erased", codeGen.namespace]; separator = "::"$ */

namespace java {

$codeGen.types:{cdef|$accessorImplSrc(cdef)$}; separator = "\n\n"$

} /* namespace java */

>>


tagDeclaration(cdef) ::= <<
struct $cdef.className$ {
  static constexpr ::std::size_t generics_arity = $length(cdef.model.templateArguments)$;
  using erased_type = ::$["java", "_erased", cdef.namespace, cdef.className]; separator = "::"$;
};
>>


forwardDeclareAccessor(cdef) ::= <<
template<$["Base_", cdef.model.templateArgumentNames]:{x|typename $x$}; anchor, wrap, separator = ", "$>
class _accessor<$["Base_", {::$["java", "_tags", cdef.namespace, cdef.className]; separator = "::"$}, cdef.model.templateArgumentNames]; anchor, wrap, separator = ", "$>
>>


declareBasicRef(cdef) ::= <<
$if (cdef.model.templateArgumentNames)$
template<$cdef.model.templateArgumentNames:{x|typename $x$}; anchor, wrap, separator = ", "$>
$endif$
using $cdef.className$ = ::java::type<$[{::$["java", "_tags", cdef.namespace, cdef.className]; separator = "::"$}, cdef.model.templateArgumentNames]:{x|$x$}; anchor, wrap, separator = ", "$>;
>>


include(file) ::= <<
#include <$file$>
>>