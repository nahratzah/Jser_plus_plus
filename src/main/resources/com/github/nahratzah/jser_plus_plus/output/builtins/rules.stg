cxxString(s) ::= <%$cxxString_.(s)$%>
u8String(s) ::= <%u8$cxxString(s)$s%>
u16String(s) ::= <%u16$cxxString(s)$%>
u32String(s) ::= <%u32$cxxString(s)$%>
wString(s) ::= <%L$cxxString(s)$%>
u8StringView(s) ::= <%u8$cxxString(s)$sv%>
u16StringView(s) ::= <%u16$cxxString(s)$sv%>
u32StringView(s) ::= <%u32$cxxString(s)$sv%>
wStringView(s) ::= <%L$cxxString(s)$sv%>


function(name,
         doImplement,
         return,
         argumentTypes=[],
         argumentNames=[],
         body="",
         docString=false,
         containingClass=false,
         containingClassTemplateArguments=[],
         containingClassTemplateArgumentsImpl=[],
         templateArguments=[],
         static=false,
         virtual=false,
         inline=false,
         noexcept=false,
         const=false
         ) ::= <<
$if (!doImplement && docString)$$renderDocString(docString)$$endif$
$if (doImplement)$$templateLine(containingClassTemplateArguments)$$endif$
$templateLine(templateArguments)$
$if (!doImplement && static)$static $endif$$\\$
$if (!doImplement && virtual)$virtual $endif$$\\$
$if (inline)$$inline$ $endif$$\\$
$if (return)$auto $endif$$\\$
$if (doImplement && containingClass)$$containingClass$$templateArgs(containingClassTemplateArgumentsImpl)$::$endif$$\\$
$name$$functionArguments(argumentTypes, argumentNames)$$\\$
$if (const)$ const$endif$$\\$
$if (noexcept)$ $noexcept$$endif$$\\$
$if (return)$$"\n"$-> $return; wrap = "\n    ", format="style=type, class=return"$$endif$$\\$
$if (!doImplement)$$\\$
;
$else$$\\$
$" "${
  $body; anchor$
}
$endif$
>>


functionArguments(argumentTypes, argumentNames) ::= <%
($argumentTypes, argumentNames:{type, name | $type; format="style=type, class=param"$ $name$}; anchor, wrap, separator = ", "$)
%>


templateLine(names, force=false) ::= <%
$if (names || force)$
  template<
  $names:{name | typename $name$}; anchor, wrap, separator = ", "$
  >
$endif$
%>


templateArgs(names, force=false) ::= <%
$if (names || force)$
  <
  $names; anchor, wrap, separator = ", "$
  >
$endif$
%>


renderDocString(docString) ::= <<
$renderDocString_.(docString)$
>>


boundTemplateType(t, format="") ::= <%
$t; format=format$
%>


tagType(model) ::= <%
::$["java", "_tags", model.namespace, model.simpleName]; separator = "::"$
%>


erasedType(model) ::= <%
::$["java", "_erased", model.namespace, model.simpleName]; separator = "::"$
%>
