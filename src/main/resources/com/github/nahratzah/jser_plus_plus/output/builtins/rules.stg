cxxString(s) ::= <%$cxxString_.({__$s$__})$%>
u8String(s) ::= <%u8$cxxString(s)$s%>
u16String(s) ::= <%u$cxxString(s)$%>
u32String(s) ::= <%U$cxxString(s)$%>
wString(s) ::= <%L$cxxString(s)$%>
u8StringView(s) ::= <%u8$cxxString(s)$sv%>
u16StringView(s) ::= <%u$cxxString(s)$sv%>
u32StringView(s) ::= <%U$cxxString(s)$sv%>
wStringView(s) ::= <%L$cxxString(s)$sv%>


function(name,
         doImplement,
         return,
         argumentTypes=[],
         argumentNames=[],
         body="",
         docString=false,
         containingClass=false,
         containingClassTemplateArguments=[],
         containingClassTemplateArgumentsImpl=[],
         templateArguments=[],
         static=false,
         virtual=false,
         pureVirtual=false,
         override=false,
         inline=false,
         noexcept=false,
         const=false,
         final=false,
         initializers=[]
         ) ::= <%
$if (!doImplement && docString)$$renderDocString(docString)$$"\n"$$endif$
$if (doImplement)$$templateLine(containingClassTemplateArguments)$$"\n"$$endif$
$if (templateArguments)$$templateLine(templateArguments)$$"\n"$$endif$
$if (!doImplement && static)$static $endif$
$if (!doImplement && virtual)$virtual $endif$
$if (inline)$$inline$ $endif$

$if (return)$auto $endif$
$if (doImplement && containingClass)$$containingClass$$templateArgs(containingClassTemplateArgumentsImpl)$::$endif$
$name$
$functionArguments(argumentTypes, argumentNames)$
$if (const)$ const$endif$
$if (noexcept)$ $noexcept; anchor$$endif$

$if (return)$
  $"\n"$
  -> $return; wrap = "\n    ", format="style=type, class=return"$
$endif$

$if (!doImplement && override)$ override$endif$
$if (!doImplement && final)$ final$endif$
$if (!doImplement && pureVirtual)$ = 0$endif$

$if (!doImplement)$
  ;
$else$
  $if (initializers)$
    $"\n"$
    : $ initializers
        : {initializer | $initializer.key$($initializer.value$)}
        ; anchor, separator = ",\n"
      $
    $"\n"$
  $else$
    $" "$
  $endif$
  $functionBody(body)$
$endif$
%>


functionBody(body) ::= <<
$if (body)$$\\$
{
  $body; anchor$
}$\\$
$else$$\\$
{}$\\$
$endif$
>>


functionArguments(argumentTypes, argumentNames) ::= <%
($argumentTypes, argumentNames:{type, name | $if (argNameIsMaybeUnused_.(name))$[[maybe_unused]] $endif$$type; format="style=type, class=param"$$if (name)$ $name$$endif$}; anchor, wrap, separator = ", "$)
%>


templateLine(names, force=false) ::= <%
$if (names || force)$
  template<
  $names:{name | typename $name$}; anchor, wrap, separator = ", "$
  >
$endif$
%>


templateArgs(names, force=false) ::= <%
$if (names || force)$
  <
  $names; anchor, wrap, separator = ", "$
  >
$endif$
%>


renderDocString(docString) ::= <%
$if (docString)$$renderDocString_.(docString)$$endif$
%>


boundTemplateType(t, format="") ::= <%
$t; format=format$
%>


tagType(model) ::= <%
::$["java", "_tags", model.namespace, model.className]; separator = "::"$
%>


erasedType(model) ::= <%
::$["java", "_erased", model.namespace, model.className]; separator = "::"$
%>
