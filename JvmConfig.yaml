---
scan:
  include:
  - java
  - java.lang
  - javax
  exclude:
  - java.applet
  - java.awt
  - java.beans
  - javax.activation
  - javax.activity
  - javax.crypto
  - javax.imageio
  - javax.jws
  - javax.management.remote.rmi
  - javax.naming
  - javax.print
  - javax.script
  - javax.security
  - javax.smartcardio
  - javax.sound
  - javax.sql
  - javax.swing
  - javax.rmi.CORBA
  - javax.rmi.CORBA_2_3
  - javax.tools
  - javax.transaction
  - javax.xml
classes:
  java.lang.Number:
    members:
    - type: method
      name: byteValue
      virtual: true
      const: true
      return:
        cxx: ::java::byte_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::byte_t>(longValue());
      doc_string: |
        \brief Retrieve the `byte` value.
        \attention The returned value may be truncated.
    - type: method
      name: shortValue
      virtual: true
      const: true
      return:
        cxx: ::java::short_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::short_t>(longValue());
      doc_string: |
        \brief Retrieve the `short` value.
        \attention The returned value may be truncated.
    - type: method
      name: intValue
      virtual: true
      const: true
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::int_t>(longValue());
      doc_string: |
        \brief Retrieve the `int` value.
        \attention The returned value may be truncated.
    - type: method
      name: longValue
      virtual: true
      const: true
      return:
        cxx: ::java::long_t
        includes:
          declaration:
          - java/primitives.h
      doc_string: |
        \brief Retrieve the `long` value.
        \attention The returned value may be truncated.
    - type: method
      name: floatValue
      virtual: true
      const: true
      return:
        cxx: ::java::float_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::float_t>(doubleValue());
      doc_string: |
        \brief Retrieve the `float` value.
        \attention The returned value may be truncated.
    - type: method
      name: doubleValue
      virtual: true
      const: true
      return:
        cxx: ::java::double_t
        includes:
          declaration:
          - java/primitives.h
      doc_string: |
        \brief Retrieve the `double` value.
        \attention The returned value may be truncated.
  java.lang.Boolean:
    fields:
      value:
        const: true
        default: "false"
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::boolean_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: "True"
      return:
        java: java.lang.Boolean
      doc_string: |
        \brief Models the `java.lang.Boolean.TRUE` constant.
        \details This simply invokes the constructor for Boolean.
        \bug This method should be static.
      body: |
        return $boundTemplateType(java.("java.lang.Boolean"), "style=type, class")$(
            ::java::_direct(),
            ::cycle_ptr::make_cycle<$boundTemplateType(java.("java.lang.Boolean"), "style=erased")$>(true));
      includes:
        implementation:
        - cycle_ptr/cycle_ptr.h
    - type: method
      name: "False"
      return:
        java: java.lang.Boolean
      doc_string: |
        \brief Models the `java.lang.Boolean.FALSE` constant.
        \details This simply invokes the constructor for Boolean.
        \bug This method should be static.
      body: |
        return $boundTemplateType(java.("java.lang.Boolean"), "style=type, class")$(
            ::java::_direct(),
            ::cycle_ptr::make_cycle<$boundTemplateType(java.("java.lang.Boolean"), "style=erased")$>(false));
      includes:
        implementation:
        - cycle_ptr/cycle_ptr.h
  java.lang.Character:
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::char_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
  java.lang.Byte:
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::byte_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: byteValue
      override: true
      const: true
      return:
        cxx: ::java::byte_t
      body: |
        return value;
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;
  java.lang.Short:
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::short_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: shortValue
      override: true
      const: true
      return:
        cxx: ::java::short_t
      body: |
        return value;
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;
  java.lang.Integer:
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::int_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: intValue
      override: true
      const: true
      return:
        cxx: ::java::int_t
      body: |
        return value;
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;
  java.lang.Long:
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::long_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;
  java.lang.Float:
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::float_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: floatValue
      override: true
      const: true
      return:
        cxx: ::java::float_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;
  java.lang.Double:
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::double_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;
  java.io.Serializable:
    friends:
    - cxx: ::java::serialization::cycle_handler
      includes:
        declaration:
        - java/serialization/type_def_fwd.h
    members:
    - type: method
      name: do_encode_
      visibility: private
      virtual: true
      const: true
      return:
        cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
      arguments:
      - name: hander_
        type:
          cxx: ::java::serialization::cycle_handler&
      includes:
        declaration:
        - java/serialization/encdec.h
        - cycle_ptr/cycle_ptr.h
        - java/serialization/type_def_fwd.h
        implementation:
        - java/serialization/type_def.h
      body: |
        return nullptr; // XXX erase body once rules take care of most things.
  java.lang.String:
    var_type:
      cxx: ::std::string
      includes:
        declaration:
        - string
    fields:
      value:
        doc_string: |
          \brief Contents of `java.lang.String`.
          \note
          This field is const, so that shared instances of string don't affect eachother.
          This corresponds to the immutable property of java strings.
        const: true
        type:
          cxx: ::std::string
          includes:
            declaration:
            - string
    members:
    - type: constructor
      arguments:
      - name: s
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
            implementation:
            - string_view
      initializers:
        value: s.data(), s.size()
    - type: method
      name: do_encode_
      visibility: private
      override: true
      final: true
      const: true
      return:
        cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
      arguments:
      - name: hander_
        type:
          cxx: ::java::serialization::cycle_handler&
      body: |
        using namespace ::java::serialization::stream;
        using conversion_type = ::std::wstring_convert<
            std::codecvt_utf8_utf16<char16_t>,
            char16_t>;

        conversion_type conversion;

        // Note: No invocation of super.do_encode_,
        // because strings are special case encoded.
        return ::cycle_ptr::make_cycle<stream_string>(conversion.from_bytes(value.data(), value.data() + value.size()));
      includes:
        declaration:
        - java/serialization/type_def_fwd.h
        - java/serialization/encdec.h
        - cycle_ptr/cycle_ptr.h
        implementation:
        - java/serialization/encdec.h
        - cycle_ptr/cycle_ptr.h
        - locale
        - codecvt
        - java/serialization/type_def.h
  java.lang.Class<Type>:
    members:
    - type: method
      name: syntheticTestDummy
      return:
        java: java.lang.Class<Type[]>
      body: |
        return nullptr;
  java.util.Collection<E>:
    members:
    - type: method
      name: empty
      virtual: true
      const: true
      noexcept: true
      return:
        cxx: bool
    - type: method
      name: size
      virtual: true
      const: true
      noexcept: true
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
    - type: method
      name: clear
      virtual: true
  java.util.List<E>:
    members:
    - type: method
      name: push_front
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: push_back
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: pop_front
      virtual: true
      return:
        java: E
    - type: method
      name: pop_back
      virtual: true
      return:
        java: E
    - type: method
      name: begin
      virtual: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      virtual: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: begin
      virtual: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      virtual: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
  java.util.ArrayList<E>:
    members:
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: push_front
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.insert(data_.begin(), std::move(e));
        return true;
    - type: method
      name: push_back
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_back(std::move(e));
        return true;
    - type: method
      name: pop_back
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.back());
        data_.pop_back();
        return r;
    - type: method
      name: pop_front
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.front());
        data_.erase(data_.begin());
        return r;
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    fields:
      size:
        visibility: private
        rename: xxx_implement_remove_
      data_:
        visibility: private
        type:
          cxx: ::std::vector<$boundTemplateType(java.("E"), "style=type, class")$, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>>
          includes:
            declaration:
            - vector
            - cycle_ptr/allocator.h
        default: ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
  java.util.LinkedList<E>:
    members:
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: push_front
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_front(std::move(e));
        return true;
    - type: method
      name: push_back
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_back(std::move(e));
        return true;
    - type: method
      name: pop_back
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.back());
        data_.pop_back();
        return r;
    - type: method
      name: pop_front
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.front());
        data_.pop_front();
        return r;
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    fields:
      data_:
        visibility: private
        type:
          cxx: ::std::list<$boundTemplateType(java.("E"), "style=type, class")$, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>>
          includes:
            declaration:
            - list
            - cycle_ptr/allocator.h
        default: ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
