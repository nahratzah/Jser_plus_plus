---
dev_mode: true
scan:
  include:
  - java
  - java.lang
  - javax
  exclude:
  - java.applet
  - java.awt
  - java.beans
  - javax.activation
  - javax.activity
  - javax.crypto
  - javax.imageio
  - javax.jws
  - javax.management.remote.rmi
  - javax.naming
  - javax.print
  - javax.script
  - javax.security
  - javax.smartcardio
  - javax.sound
  - javax.sql
  - javax.swing
  - javax.rmi.CORBA
  - javax.rmi.CORBA_2_3
  - javax.tools
  - javax.transaction
  - javax.xml
rules:
# Implement hash code.
- id: java.lang.Object/equals_and_hashcode
  predicate:
    interface: false
    abstract: true
    class: true
  members:
  - type: method
    name: __hash_code__
    noexcept: true
    override: true
    const: true
    visibility: protected
    covariant_return: false
    arguments:
    - name: specialized
      type:
        cxx: bool
    - name: max_cascade
      type:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
    return:
      cxx: ::std::size_t
      includes:
        declaration:
        - cstddef
    body: |
      static const ::std::size_t nonce = ::java::__hash_nonce();

      $if (model.fields)$specialized = true;$endif$
      $if (model.superClass)$
      return ::java::hash_combiner($boundTemplateType(model.superClass, "style=erased")$::__hash_code__(specialized, max_cascade), max_cascade)
      $else$
      return ::java::hash_combiner(max_cascade)
      $endif$
          $[{nonce}, model.fields: { f | $f.name$}]: { value | << $value$}; anchor, separator = "\n"$;
    includes:
      implementation:
      - java/hash.h
  - type: method
    name: __equal__
    override: true
    const: true
    visibility: protected
    covariant_return: false
    arguments:
    - name: specialized
      type:
        cxx: bool
    - name: eq
      type:
        cxx: ::java::_equal_helper&
        includes:
          declaration:
          - java/object_intf.h
          implementation:
          - java/reflect.h
    - name: other
      type:
        cxx: const ::java::object_intf&
        includes:
          declaration:
          - java/object_intf.h
    body: |
      eq(::java::_reflect_ops::get_class(*this), ::java::_reflect_ops::get_class(other));
      if (!eq.ok()) return;

      const $erasedType(model)$& casted_other = dynamic_cast<const $erasedType(model)$&>(other);
      $erasedType(model)$::__equal_impl__(specialized, eq, *this, casted_other);
    includes:
      implementation:
      - java/reflect.h
  - type: method
    name: __equal_impl__
    static: true
    visibility: protected
    arguments:
    - name: specialized
      type:
        cxx: bool
    - name: eq
      type:
        cxx: ::java::_equal_helper&
        includes:
          declaration:
          - java/object_intf.h
          implementation:
          - java/reflect.h
    - name: x
      type:
        cxx: const $erasedType(model)$&
    - name: y
      type:
        cxx: const $erasedType(model)$&
    body: |
      $if (model.fields)$specialized = true;$endif$
      $if (model.superClass)$
      $boundTemplateType(model.superClass, "style=erased")$::__equal_impl__(
          specialized, eq, x, y);
      $else$
      if (!specialized && (&x != &y)) eq.fail();
      $endif$
      $model.fields: { f | $f.name$}: { fieldname | eq(x.$fieldname$, y.$fieldname$);}; anchor, separator = "\n"$
    includes:
      implementation:
      - java/reflect.h

# Create serializable class description.
- predicate:
    interface: false
    abstract: true
    class: true
    inherits:
    - java.io.Serializable
  members:
  - type: method
    name: __serializable_class__
    visibility: protected
    static: true
    arguments:
    - name: handler_
      type:
        cxx: ::java::serialization::cycle_handler&
        includes:
          declaration:
          - java/serialization/type_def_fwd.h
    return:
      cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::new_class_desc__class_desc>
      includes:
        declaration:
        - java/serialization/encdec.h
        - cycle_ptr/cycle_ptr.h
    body: |
      using namespace ::std::literals;
      using namespace ::java::serialization::stream;

      return handler_.encode_class_desc(
          $u8String(model.name)$,
          [](::java::serialization::cycle_handler& handler) {
            return cycle_ptr::make_cycle<new_class_desc__class_desc>(
                field_descriptor($u16StringView(model.name)$),
                $model.serialVersionUID_string$, // serialVersionUID
                $if (model.superClass.type.testInherits.({java.io.Serializable}))$$boundTemplateType(model.superClass, "style=erased")$::__serializable_class__(handler),$else$nullptr, // No serializable super class.$endif$
                SC_SERIALIZABLE, // flags (XXX actual flags)
                ::std::initializer_list<field_desc>{
                  $ model.serializationFields
                  : { f | $\\$
                      $if (f.serializationType.primitive)$$\\$
                      $if (f.serializationExtents)$object_desc$else$primitive_desc$endif$$\\$
                      (primitive_type::$f.serializationType.name$_type, $u16StringView(f.serializationName)$, $f.serializationExtents$)$\\$
                      $else$$\\$
                      object_desc($u16StringView(f.serializationType.name)$, $u16StringView(f.serializationName)$, $f.serializationExtents$)$\\$
                      $endif$$\\$
                    }
                  ; anchor, separator = ",\n"$
                });
          });
    includes:
      implementation:
      - initializer_list
      - string
      - string_view
      - java/serialization/type_def.h
      - java/serialization/encdec.h

# Implement default do_encode_ implementation.
- id: java.io.Serializable/do_encode_
  predicate:
    interface: false
    abstract: true
    class: true
    inherits:
    - java.io.Serializable
  members:
  - type: method
    name: do_encode_fields_
    visibility: private
    static: true
    arguments:
    - name: handler_
      type:
        cxx: ::java::serialization::cycle_handler&
        includes:
          declaration:
          - java/serialization/type_def_fwd.h
    - name: out
      # replace with object type!
      type:
        cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
        includes:
          declaration:
          - java/serialization/type_def_fwd.h
    body:
      // XXX implement
  - type: method
    name: do_encode_
    visibility: private
    override: true
    const: true
    covariant_return: false
    return:
      cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
    arguments:
    - name: _handler_
      type:
        cxx: ::java::serialization::cycle_handler&
    # XXX implement
    body: |
      return nullptr; // XXX
    includes:
      declaration:
      - java/serialization/type_def_fwd.h
      - java/serialization/encdec.h
      - cycle_ptr/cycle_ptr.h
      implementation:
      - java/serialization/encdec.h
      - cycle_ptr/cycle_ptr.h
      - java/serialization/type_def.h

# Implement Comparable<> for enums.
- predicate:
    interface: false
    abstract: false
    class: true
    inherits:
    - java.lang.Enum
  members:
  - type: method
    name: compareTo
    override: true
    const: true
    arguments:
    - name: o
      type:
        # This is a bit of a hack; we would prefer something a little more elegant.
        cxx: $boundTemplateType(java.({const $model.name$}), "style=type, class=param")$
    return:
      cxx: ::java::int_t
      includes:
        declaration:
        - java/primitives.h
    body: |
      const ::java::int_t x = static_cast<::java::int_t>(value);
      const ::java::int_t y = static_cast<::java::int_t>(o->value());

      return (x < y ? -1 : (x > y ? 1 : 0));
    includes:
      implementation:
      - java/primitives.h

# Implement do_encode_ for enums.
- predicate:
    interface: false
    abstract: false
    class: true
    inherits:
    - java.lang.Enum
  suppress:
  - java.io.Serializable/do_encode_
  members:
  - type: method
    name: do_encode_
    visibility: private
    override: true
    final: true
    const: true
    covariant_return: false
    return:
      cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
    arguments:
    - name: handler_
      type:
        cxx: ::java::serialization::cycle_handler&
    includes:
      declaration:
      - java/serialization/encdec.h
      - cycle_ptr/cycle_ptr.h
      - java/serialization/type_def_fwd.h
      implementation:
      - java/serialization/type_def.h
      - java/serialization/encdec.h
    body: |
      using namespace ::java::serialization::stream;
      using conversion_type = ::std::wstring_convert<
            std::codecvt_utf8_utf16<char16_t>,
            char16_t>;

      conversion_type conversion;
      const auto& value_str = to_string(value);

      // Note: no call to super, as enum encoding is specialized.
      return cycle_ptr::make_cycle<new_enum>(
          $erasedType(model)$::__serializable_class__(handler_),
          ::cycle_ptr::make_cycle<stream_string>(conversion.from_bytes(value_str.data(), value_str.data() + value_str.size())));

# Implement values() for enums.
- predicate:
    interface: false
    abstract: false
    class: true
    inherits:
    - java.lang.Enum
  members:
  - type: method
    name: values
    static: true
    return:
      cxx: std::vector<$boundTemplateType(java.(model.name), "style=type, class")$>
      includes:
        declaration:
        - vector
    doc_string: |
      \brief Retrieve all enum values.
      \details All values of this enum.
      \returns Vector of enums.
    body: |
      return { $ model.enumValues
               : {v | $v.remappedName$()}
               ; anchor, wrap = "\n", separator = ", "$ };

# Add implemented __get_class__ method to all concrete classes.
- predicate:
    interface: false
    abstract: false
    class: true
  members:
  - type: method
    name: __get_class__
    override: true
    const: true
    covariant_return: false
    visibility: private
    return:
      cxx: ::cycle_ptr::cycle_gptr<$boundTemplateType(java.({java.lang.Class<?>}), "style=erased")$>
      includes:
        declaration:
        - cycle_ptr/cycle_ptr.h
    # XXX also add arguments for super type and interfaces!
    body: |
      return $erasedType(model)$::__class__();

# Add __class__ method to all types.
- predicate:
    interface: true
    abstract: true
    class: true
  friends:
  - cxx: ::java::_reflect_ops
    includes:
      declaration:
      - java/object_intf.h
  members:
  - type: method
    name: __class__
    static: true
    visibility: private
    return:
      cxx: ::cycle_ptr::cycle_gptr<$boundTemplateType(java.({java.lang.Class<?>}), "style=erased")$>
      includes:
        declaration:
        - cycle_ptr/cycle_ptr.h
    body: |
      using namespace ::std::string_literals;

      return ::java::raw_ptr<$boundTemplateType(java.({java.lang.Class<?>}), "style=tag")$>($boundTemplateType(java.({java.lang.Class<?>}), "style=type, class")$(
          ::java::allocate,
          $u8String(model.name)$,
          $if (model.superClass)$::java::get_class<$boundTemplateType(model.superClass, "style=type")$>()$else$nullptr$endif$,
          ::std::initializer_list<$boundTemplateType(java.("java.lang.Class<?>"), "style=type, class")$>{
            $model.interfaces: { intf | ::java::get_class<$boundTemplateType(intf, "style=type")$>()}; anchor, separator = ",\n"$
          },
          $if (!model.interface && model.testInherits.({java.io.Serializable}))$&$erasedType(model)$::__serializable_class__$else$nullptr$endif$));
    includes:
      implementation:
      - java/reflect.h
      - initializer_list


classes:
  java.lang.Object:
    dev_mode: false
    suppress_local:
    - java.lang.Object/equals_and_hashcode
    friends:
    - cxx: ::java::_equal_helper
      includes:
        declaration:
        - java/object_intf.h
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->::java::object_intf::__hash_code__(specialized, max_cascade);
      includes:
        implementation:
        - java/object_intf.h
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        const $erasedType(model)$* casted_other = dynamic_cast<const $erasedType(model)$*>(&other);
        if (casted_other == nullptr)
          eq.fail();
        else
          __equal_impl__(specialized, eq, *this, *casted_other);
      includes:
        implementation:
        - java/object_intf.h
    - type: method
      name: __equal_impl__
      static: true
      visibility: protected
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: x
        type:
          cxx: const $erasedType(model)$&
      - name: y
        type:
          cxx: const $erasedType(model)$&
      body: |
        if (!specialized && (&x != &y)) eq.fail();
      includes:
        implementation:
        - java/reflect.h


  java.lang.Enum<E>:
    dev_mode: false
    suppress:
    - java.io.Serializable/do_encode_
    members:
    - type: constructor
      visibility: protected


  java.util.Comparator<T>:
    dev_mode: false
    members:
    - type: method
      name: compare
      const: true
      virtual: true
      arguments:
      - name: x
        type:
          java: const T
      - name: y
        type:
          java: const T
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
    - type: method
      name: naturalOrder
      static: true
      return:
        java: java.util.Comparator<T>
      body: |
        return ::java::cast<$boundTemplateType(java.("java.util.Comparator<java.lang.Object>"), "style=type, class")$>(
            $boundTemplateType(java.({java.util.Comparators\$NaturalOrderComparator}), "style=type, class")$::Instance());


  java.lang.Comparable<T>:
    dev_mode: false
    doc_string: |
      \brief Interface that declares two types are comparable.
      \tparam T The type with which the type implementing this interface can be compared.
    members:
    - type: method
      name: compareTo
      const: true
      virtual: true
      arguments:
      - name: o
        type:
          java: const T
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      # XXX Must be pure virtual
      body: return 0; // XXX implementations needed


  java.util.Comparators$NaturalOrderComparator:
    dev_mode: false
    members:
    - type: method
      name: compare
      const: true
      override: true
      arguments:
      - name: x
        type:
          java: const java.lang.Comparable<java.lang.Object>
      - name: y
        type:
          java: const java.lang.Comparable<java.lang.Object>
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return x->compareTo(y);


  java.util.Comparators$NullComparator<T>:
    dev_mode: false
    members:
    - type: method
      name: compare
      const: true
      override: true
      arguments:
      - name: x
        type:
          java: const T
      - name: y
        type:
          java: const T
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        if (x == nullptr && y == nullptr)
          return 0;
        else if (x == nullptr)
          return (nullFirst ? -1 : 1);
        else if (y == nullptr)
          return (!nullFirst ? -1 : 1);
        else if (real == nullptr)
          return 0;
        else
          return real->compare(std::move(x), std::move(y));
    - type: constructor
      arguments:
      - name: nullFirst
        type:
          cxx: bool
      - name: real
        type:
          java: java.util.Comparator<? super T>
      initializers:
        nullFirst: nullFirst
        real: ::java::cast<$boundTemplateType(java.("java.util.Comparator<T>"), "style=type, class")$>(std::move(real))


  java.lang.Number:
    dev_mode: false
    members:
    - type: method
      name: byteValue
      virtual: true
      const: true
      return:
        cxx: ::java::byte_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::byte_t>(longValue());
      doc_string: |
        \brief Retrieve the `byte` value.
        \attention The returned value may be truncated.
    - type: method
      name: shortValue
      virtual: true
      const: true
      return:
        cxx: ::java::short_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::short_t>(longValue());
      doc_string: |
        \brief Retrieve the `short` value.
        \attention The returned value may be truncated.
    - type: method
      name: intValue
      virtual: true
      const: true
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::int_t>(longValue());
      doc_string: |
        \brief Retrieve the `int` value.
        \attention The returned value may be truncated.
    - type: method
      name: longValue
      virtual: true
      const: true
      return:
        cxx: ::java::long_t
        includes:
          declaration:
          - java/primitives.h
      doc_string: |
        \brief Retrieve the `long` value.
        \attention The returned value may be truncated.
    - type: method
      name: floatValue
      virtual: true
      const: true
      return:
        cxx: ::java::float_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        return static_cast<::java::float_t>(doubleValue());
      doc_string: |
        \brief Retrieve the `float` value.
        \attention The returned value may be truncated.
    - type: method
      name: doubleValue
      virtual: true
      const: true
      return:
        cxx: ::java::double_t
        includes:
          declaration:
          - java/primitives.h
      doc_string: |
        \brief Retrieve the `double` value.
        \attention The returned value may be truncated.


  java.lang.Boolean:
    dev_mode: false
    var_type:
      cxx: ::java::boolean_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: "false"
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::boolean_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Boolean
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const bool x = value;
        const bool y = o->value();

        if (x == y) return 0;
        return (x ? 1 : -1);
    - type: method
      name: "True"
      static: true
      return:
        java: java.lang.Boolean
      doc_string: |
        \brief Models the `java.lang.Boolean.TRUE` constant.
        \details This simply invokes the constructor for Boolean.
        \bug This method should be static.
      body: |
        return $boundTemplateType(java.("java.lang.Boolean"), "style=type, class")$(::java::allocate, true);
      includes:
        implementation:
        - cycle_ptr/cycle_ptr.h
    - type: method
      name: "False"
      static: true
      return:
        java: java.lang.Boolean
      doc_string: |
        \brief Models the `java.lang.Boolean.FALSE` constant.
        \details This simply invokes the constructor for Boolean.
        \bug This method should be static.
      body: |
        return $boundTemplateType(java.("java.lang.Boolean"), "style=type, class")$(::java::allocate, false);
      includes:
        implementation:
        - cycle_ptr/cycle_ptr.h


  java.lang.Character:
    dev_mode: false
    var_type:
      cxx: ::java::char_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::char_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Character
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const ::java::char_t x = value;
        const ::java::char_t y = o->value();

        if (x == y) return 0;
        return (x < y ? -1 : 1);
      includes:
        implementation:
        - java/primitives.h


  java.lang.Byte:
    dev_mode: false
    var_type:
      cxx: ::java::byte_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::byte_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Byte
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const ::java::byte_t x = value;
        const ::java::byte_t y = o->value();

        if (x == y) return 0;
        return (x < y ? -1 : 1);
      includes:
        implementation:
        - java/primitives.h
    - type: method
      name: byteValue
      override: true
      const: true
      return:
        cxx: ::java::byte_t
      body: |
        return value;
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;


  java.lang.Short:
    dev_mode: false
    var_type:
      cxx: ::java::short_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::short_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Short
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const ::java::short_t x = value;
        const ::java::short_t y = o->value();

        if (x == y) return 0;
        return (x < y ? -1 : 1);
      includes:
        implementation:
        - java/primitives.h
    - type: method
      name: shortValue
      override: true
      const: true
      return:
        cxx: ::java::short_t
      body: |
        return value;
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;


  java.lang.Integer:
    dev_mode: false
    var_type:
      cxx: ::java::int_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::int_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Integer
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const ::java::int_t x = value;
        const ::java::int_t y = o->value();

        if (x == y) return 0;
        return (x < y ? -1 : 1);
      includes:
        implementation:
        - java/primitives.h
    - type: method
      name: intValue
      override: true
      const: true
      return:
        cxx: ::java::int_t
      body: |
        return value;
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;


  java.lang.Long:
    dev_mode: false
    var_type:
      cxx: ::java::long_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::long_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Long
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const ::java::long_t x = value;
        const ::java::long_t y = o->value();

        if (x == y) return 0;
        return (x < y ? -1 : 1);
      includes:
        implementation:
        - java/primitives.h
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;


  java.lang.Float:
    dev_mode: false
    var_type:
      cxx: ::java::float_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::float_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Float
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const ::java::float_t x = value;
        const ::java::float_t y = o->value();

        if (x == y) return 0;
        return (x < y ? -1 : 1);
      includes:
        implementation:
        - java/primitives.h
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: floatValue
      override: true
      const: true
      return:
        cxx: ::java::float_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;


  java.lang.Double:
    dev_mode: false
    var_type:
      cxx: ::java::double_t
      includes:
        declaration:
        - java/primitives.h
    fields:
      value:
        const: true
        default: 0
    members:
    - type: constructor
      arguments:
      - name: v
        type:
          cxx: ::java::double_t
          includes:
            declaration:
            - java/primitives.h
      initializers:
        value: v
    - type: method
      name: compareTo
      const: true
      override: true
      arguments:
      - name: o
        type:
          java: const java.lang.Double
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      body: |
        const ::java::double_t x = value;
        const ::java::double_t y = o->value();

        if (x == y) return 0;
        return (x < y ? -1 : 1);
      includes:
        implementation:
        - java/primitives.h
    - type: method
      name: longValue
      override: true
      const: true
      return:
        cxx: ::java::long_t
      body: |
        return value;
    - type: method
      name: doubleValue
      override: true
      const: true
      return:
        cxx: ::java::double_t
      body: |
        return value;


  java.io.Serializable:
    dev_mode: false
    friends:
    - cxx: ::java::serialization::cycle_handler
      includes:
        declaration:
        - java/serialization/type_def_fwd.h
    members:
    - type: method
      name: do_encode_
      visibility: private
      virtual: true
      const: true
      covariant_return: false
      return:
        cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
      includes:
        declaration:
        - java/serialization/encdec.h
        - cycle_ptr/cycle_ptr.h
        - java/serialization/type_def_fwd.h
        implementation:
        - java/serialization/type_def.h
      # XXX erase body, so method becomes pure virtual
      body: |
        return nullptr; // XXX erase body once rules take care of most things.


  java.lang.String:
    dev_mode: false
    suppress:
    - java.io.Serializable/do_encode_
    var_type:
      cxx: ::std::string
      includes:
        declaration:
        - string
    fields:
      value:
        doc_string: |
          \brief Contents of `java.lang.String`.
          \note
          This field is const, so that shared instances of string don't affect eachother.
          This corresponds to the immutable property of java strings.
        const: true
        type:
          cxx: ::std::string
          includes:
            declaration:
            - string
    members:
    - type: constructor
      arguments:
      - name: s
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
            implementation:
            - string_view
      initializers:
        value: s.data(), s.size()
    - type: method
      name: compareTo
      visibility: public
      override: true
      const: true
      return:
        cxx: ::java::int_t
        includes:
          declaration:
          - java/primitives.h
      arguments:
      - name: o
        type:
          java: java.lang.String
      body: |
        const std::string& x = value;
        const std::string& y = o->value();
        return (x < y ? -1 : (x > y ? 1 : 0));
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return value.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return value.size();
    - type: method
      name: front
      override: true
      const: true
      return:
        cxx: char
      body: |
        return value.front();
    - type: method
      name: back
      override: true
      const: true
      return:
        cxx: char
      body: |
        return value.back();
    - type: method
      name: at
      override: true
      const: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: char
      body: |
        return value.at(index);
    - type: method
      name: substr
      override: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: count
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.String
      body: |
        return $boundTemplateType(java.("java.lang.String"), "style=type, class")$(
            ::java::allocate, value.substr(pos, count));
    - type: method
      name: subSequence
      virtual: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: count
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.String
      body: |
        return substr(pos, count);
    - type: method
      name: str
      override: true
      const: true
      return:
        cxx: ::std::string
        includes:
          declaration:
          - string
      body: |
        return value;
    - type: method
      name: do_encode_
      visibility: private
      override: true
      final: true
      const: true
      covariant_return: false
      return:
        cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
      arguments:
      - name: _handler_
        type:
          cxx: ::java::serialization::cycle_handler&
      body: |
        using namespace ::java::serialization::stream;
        using conversion_type = ::std::wstring_convert<
            std::codecvt_utf8_utf16<char16_t>,
            char16_t>;

        conversion_type conversion;

        // Note: No invocation of super.do_encode_,
        // because strings are special case encoded.
        return ::cycle_ptr::make_cycle<stream_string>(conversion.from_bytes(value.data(), value.data() + value.size()));
      includes:
        declaration:
        - java/serialization/type_def_fwd.h
        - java/serialization/encdec.h
        - cycle_ptr/cycle_ptr.h
        implementation:
        - java/serialization/encdec.h
        - cycle_ptr/cycle_ptr.h
        - locale
        - codecvt
        - java/serialization/type_def.h


  java.lang.Class<Type>:
    dev_mode: false
    suppress:
    - java.lang.Object/equals_and_hashcode
    - java.io.Serializable/do_encode_
    fields:
      name:
        type:
          cxx: ::std::string
        const: true
      super:
        type:
          java: java.lang.Class<?>
        final: true
      interfaces:
        visibility: private
        type:
          java: java.lang.Iterable<java.lang.Class<?>>
        final: true
      allTypes:
        visibility: private
        type:
          java: java.util.HashSet<java.lang.Class<?>>
        final: true
        getter: true
      serialization_fn:
        visibility: private
        type:
          cxx: std::function<::cycle_ptr::cycle_gptr<::java::serialization::stream::new_class_desc__class_desc>(::java::serialization::cycle_handler&)>
          includes:
            declaration:
            - functional
            - cycle_ptr/cycle_ptr.h
            - java/serialization/encdec.h
            - java/serialization/type_def_fwd.h
        const: true
    members:
    - type: constructor
      arguments:
      - name: name
        type:
          cxx: ::std::string
      - name: super
        type:
          java: java.lang.Class<?>
      - name: interfaces
        type:
          cxx: std::initializer_list<$boundTemplateType(java.("java.lang.Class<?>"), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      - name: serialization_fn
        type:
          cxx: std::function<::cycle_ptr::cycle_gptr<::java::serialization::stream::new_class_desc__class_desc>(::java::serialization::cycle_handler&)>
          includes:
            declaration:
            - functional
            - cycle_ptr/cycle_ptr.h
            - java/serialization/encdec.h
            - java/serialization/type_def_fwd.h
      initializers:
        name: std::move(name)
        super: std::move(super)
        interfaces: $boundTemplateType(java.("java.util.ArrayList<java.lang.Class<?>>"), "style=type, class")$(::java::allocate, interfaces.begin(), interfaces.end())
        allTypes: ::java::allocate
        serialization_fn: std::move(serialization_fn)
      body: |
        // While we're part of our own type set, we can't add ourselves.
        // Because we're still under construction, thus the `shared_from_this` mechanic is unavailable.

        // Add super type and its allTypes set.
        if (this->super) {
          allTypes->insert(this->super);
          allTypes->insert(this->super->allTypes()->begin(), this->super->allTypes()->end());
        }

        // Add each interface's allTypes set.
        std::for_each(
            this->interfaces->begin(), this->interfaces->end(),
            [this](const auto& i) {
              allTypes->insert(i);
              allTypes->insert(i->allTypes()->begin(), i->allTypes()->end());
            });
      includes:
        implementation:
        - algorithm
    - type: method
      name: isAssignableFrom
      const: true
      arguments:
      - name: cls
        type:
          java: const java.lang.Class<?>
      return:
        cxx: bool
      doc_string: |
        \brief Test if the argument class is derived from this class.
        \param cls A class.
        \return True if the argument class is derived from this class, false otherwise.
        \throws ::java::null_error if \p cls is a null-reference.
      body: |
        const auto this_ptr = ::java::const_ref<$boundTemplateType(java.({java.lang.Class<?>}), "style=type, class")$>(::java::_direct(), this->shared_from_this(this));
        return this_ptr == cls // We must test same-class outside of the allTypes() set, since we could not add this during our constructor.
            || cls->allTypes()->contains(this_ptr);
    - type: method
      name: isInstance
      const: true
      arguments:
      - name: obj
        type:
          java: const java.lang.Object
      return:
        cxx: bool
      doc_string: |
        \brief Test if the \p obj is an instance of this class.
        \param obj The object to test.
        \return True if \p obj is an instance of this class.
        \note The function returns false for null-references.
      body: |
        return obj != nullptr && isAssignableFrom(::java::get_class(obj));
      includes:
        implementation:
        - java/reflect.h
    - type: method
      name: cast
      const: true
      arguments:
      - name: obj
        type:
          java: java.lang.Object
      return:
        java: Type
      doc_string: |
        \brief Cast the \p obj to this class.
        \details
        Verifies that \p obj is an instance of this class, then returns it.
        \attention
        Generics parameters are not validated.
        This may lead to errors during use, if they are wrongly constrained.
        (And it may happen in other types, if you modify the returned value.)
        \return \p obj casted to the class type. Or `nullptr` if \p obj is a null-reference.
        \throws std::bad_cast If the object is not an instance of this class.
      body: |
        // Actual casting is handled by generic accessor.
        // But we must validate, in case the accessor is using erased types.
        if (obj != nullptr && !isInstance(obj)) throw std::bad_cast();

        return ::java::_maybe_cast(::std::move(obj));
      includes:
        implementation:
        - java/_maybe_cast.h
    - type: method
      name: cast
      const: true
      arguments:
      - name: obj
        type:
          java: const java.lang.Object
      return:
        java: const Type
      doc_string: |
        \brief Cast the \p obj to this class.
        \details
        Verifies that \p obj is an instance of this class, then returns it.
        \attention
        Generics parameters are not validated.
        This may lead to errors during use, if they are wrongly constrained.
        (And it may happen in other types, if you modify the returned value.)
        \return \p obj casted to the class type. Or `nullptr` if \p obj is a null-reference.
        \throws std::bad_cast If the object is not an instance of this class.
      body: |
        // Actual casting is handled by generic accessor.
        // But we must validate, in case the accessor is using erased types.
        if (obj != nullptr && !isInstance(obj)) throw std::bad_cast();

        return ::java::_maybe_cast(::std::move(obj));
      includes:
        implementation:
        - java/_maybe_cast.h
    - type: method
      name: getSuperClass
      const: true
      return:
        java: java.lang.Class<?>
      doc_string: |
        \brief Get the super class of this class.
        \return The class object describing the super class of this class.
        A null-reference is returned if this type has no super class
        (such as in the case of interfaces and \ref ::java::lang::Object "java.lang.Object").
      body: |
        return ::java::constcast<$boundTemplateType(java.({java.lang.Class<?>}), "style=type, class")$>(super);
    - type: method
      name: getInterfaces
      const: true
      return:
        java: java.lang.Iterable<java.lang.Class<?>>
      doc_string:
        \brief Get the interfaces implemented by this class.
        \returns An \ref ::java::lang::Iterable "iterable" over the interfaces implemented by this class.
      body: |
        return ::java::constcast<$boundTemplateType(java.({java.lang.Iterable<java.lang.Class<?>>}), "style=type, class")$>(interfaces);
    - type: method
      name: do_encode_
      visibility: private
      override: true
      const: true
      final: true
      covariant_return: false
      return:
        cxx: ::cycle_ptr::cycle_gptr<::java::serialization::stream::stream_element>
        includes:
          declaration:
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
          includes:
            declaration:
            - java/serialization/type_def_fwd.h
      body: |
        using namespace ::java::serialization::stream;
        using conversion_type = ::std::wstring_convert<
            std::codecvt_utf8_utf16<char16_t>,
            char16_t>;

        auto result = ::cycle_ptr::make_cycle<new_class>();

        if (serialization_fn) {
          (*result) = serialization_fn(handler_);
        } else {
          conversion_type conversion;

          (*result) = cycle_ptr::make_cycle<new_class_desc__class_desc>(
              field_descriptor(conversion.from_bytes(name)),
              0); // serialVersionUID for non-serializable class.
        }

        // Note: No invocation of super.do_encode_,
        // because classes are special case encoded.
        return result;
      includes:
        implementation:
        - java/serialization/encdec.h


  java.lang.Iterable<T>:
    dev_mode: false
    members:
    - type: method
      name: begin
      virtual: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("T"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      virtual: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("T"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: begin
      virtual: true
      const: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("T"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      virtual: true
      const: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("T"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h


  java.util.Collection<E>:
    suppress:
    - java.lang.Object/equals_and_hashcode
    dev_mode: false
    members:
    - type: method
      name: empty
      virtual: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
    - type: method
      name: size
      virtual: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
    - type: method
      name: clear
      virtual: true
    - type: method
      name: insert
      virtual: true
      arguments:
      - name: e
        type:
          java: E
      doc_string: |
        \brief Add an element to the collection.
        \note Exact position depends on implementation.
    - type: method
      name: insert
      virtual: true
      arguments:
      - name: b
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      body: |
        std::for_each(std::move(b), std::move(e),
            [this](const auto& i) {
              insert(i);
            });
      doc_string: |
        \brief Add elements to the collection.
        \note Exact position depends on implementation.


  java.util.List<E>:
    dev_mode: false
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        static const ::std::size_t nonce = ::java::__hash_nonce();

        auto hc = ::java::hash_combiner(max_cascade)
            << nonce;
        for (const auto& i : *this) hc << i;
        return hc;
      includes:
        implementation:
        - java/hash.h
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        const $erasedType(model)$* casted_other = dynamic_cast<const $erasedType(model)$*>(&other);
        if (casted_other == nullptr) {
          eq.fail();
        } else {
          $erasedType(model)$::__equal_impl__(specialized, eq, *this, *casted_other);
        }
      includes:
        implementation:
        - java/reflect.h
    - type: method
      name: __equal_impl__
      static: true
      visibility: protected
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: x
        type:
          cxx: const $boundTemplateType(java.({java.util.List<E>}), "style=erased")$&
      - name: y
        type:
          cxx: const $boundTemplateType(java.({java.util.List<E>}), "style=erased")$&
      body: |
        if (!std::equal(
            x.begin(), x.end(),
            y.begin(), y.end(),
            [&eq](const auto& x, const auto& y) {
              return eq(x, y).ok(); // By returning the `ok()` state, we can bail out early.
            }))
          eq.fail(); // This only makes a difference when there's a length difference.
      includes:
        implementation:
        - java/reflect.h
        - algorithm
    - type: method
      name: push_front
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: push_back
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: pop_front
      virtual: true
      return:
        java: E
    - type: method
      name: pop_back
      virtual: true
      return:
        java: E
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: begin
      override: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      override: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: front
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: front
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: push
      virtual: true
      return:
        cxx: void
      arguments:
      - name: e
        type:
          java: E
      body: |
        push_back(std::move(e));
    - type: method
      name: pop
      virtual: true
      return:
        cxx: void
      body: |
        pop_front();
    - type: method
      name: at
      virtual: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: E
      doc_string: |
        \brief Retrieve the element at the given index from the list.
        \param index Index of the element to be returned.
        \returns Element at the given index.
        \throws std::out_of_range if the index exceeds the list size.
    - type: method
      name: at
      const: true
      virtual: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: const E
      doc_string: |
        \brief Retrieve the element at the given index from the list.
        \param index Index of the element to be returned.
        \returns Element at the given index.
        \throws std::out_of_range if the index exceeds the list size.
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        push_back(std::move(e));
      doc_string: |
        \brief Add an element to the end of the list.


  java.util.ArrayList<E>:
    dev_mode: false
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: std::move(b), std::move(e), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<$boundTemplateType(java.("E"), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      initializers:
        data_: init, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: push_front
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.insert(data_.begin(), std::move(e));
        return true;
    - type: method
      name: push_back
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_back(std::move(e));
        return true;
    - type: method
      name: pop_back
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.back());
        data_.pop_back();
        return r;
    - type: method
      name: pop_front
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.front());
        data_.erase(data_.begin());
        return r;
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: front
      override: true
      const: true
      return:
        java: const E
      body: |
        return data_.front();
    - type: method
      name: back
      override: true
      const: true
      return:
        java: const E
      body: |
        return data_.back();
    - type: method
      name: front
      override: true
      return:
        java: E
      body: |
        return data_.front();
    - type: method
      name: back
      override: true
      return:
        java: E
      body: |
        return data_.back();
    - type: method
      name: at
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: E
      body: |
        return data_.at(index);
    - type: method
      name: at
      const: true
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: const E
      body: |
        return data_.at(index);
    fields:
      size:
        visibility: private
        # XXX implement field removal
        rename: xxx_implement_remove_
      data_:
        visibility: private
        type:
          cxx: ::std::vector<$boundTemplateType(java.("E"), "style=type, class")$, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>>
          includes:
            declaration:
            - vector
            - cycle_ptr/allocator.h
        default: ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)


  java.util.LinkedList<E>:
    dev_mode: false
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: std::move(b), std::move(e), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<$boundTemplateType(java.("E"), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      initializers:
        data_: init, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: push_front
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_front(std::move(e));
        return true;
    - type: method
      name: push_back
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_back(std::move(e));
        return true;
    - type: method
      name: pop_back
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.back());
        data_.pop_back();
        return r;
    - type: method
      name: pop_front
      override: true
      return:
        java: E
      body: |
        $boundTemplateType(java.("E"), "style=type, class")$ r = std::move(data_.front());
        data_.pop_front();
        return r;
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: front
      override: true
      const: true
      return:
        java: const E
      body: |
        return data_.front();
    - type: method
      name: back
      override: true
      const: true
      return:
        java: const E
      body: |
        return data_.back();
    - type: method
      name: front
      override: true
      return:
        java: E
      body: |
        return data_.front();
    - type: method
      name: back
      override: true
      return:
        java: E
      body: |
        return data_.back();
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        push_back(std::move(e));
      doc_string: |
        \brief Add an element to the end of the list.
    fields:
      data_:
        visibility: private
        type:
          cxx: ::std::list<$boundTemplateType(java.("E"), "style=type, class")$, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>>
          includes:
            declaration:
            - list
            - cycle_ptr/allocator.h
        default: ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)


  java.util.Queue<E>:
    dev_mode: false
    members:
    - type: method
      name: push
      virtual: true
      return:
        cxx: void
      arguments:
      - name: e
        type:
          java: E
      doc_string: |
        \brief Pushes the element \p e on the end of the queue.
        \param e The element to be pushed onto the queue.
    - type: method
      name: pop
      virtual: true
      return:
        cxx: void
      doc_string: |
        \brief Removes an element from the front of the queue.
    - type: method
      name: front
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: front
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        push(std::move(e));
      doc_string: |
        \brief Add an element to the end of the list.


  java.util.Deque<E>:
    dev_mode: false
    members:
    - type: method
      name: push_front
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: push_back
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: pop_front
      virtual: true
      return:
        java: E
    - type: method
      name: pop_back
      virtual: true
      return:
        java: E
    - type: method
      name: front
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: front
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: push
      virtual: true
      return:
        cxx: void
      arguments:
      - name: e
        type:
          java: E
      body: |
        push_back(std::move(e));
    - type: method
      name: pop
      virtual: true
      return:
        cxx: void
      body: |
        pop_front();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: begin
      override: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      override: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h


  java.util.AbstractCollection<E>:
    dev_mode: false
    members:
    - type: method
      name: empty
      const: true
      override: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return size() == 0u;
    # XXX implement to_string logic for objects


  java.util.AbstractList<E>:
    dev_mode: false
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      final: true
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.List<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.List<E>}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.AbstractSequentialList<E>:
    dev_mode: false
    members:
    - type: method
      name: at
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: E
      body: |
        if (index >= size()) throw ::std::out_of_range("index too large");
        return *::std::next(begin(), index);
      includes:
        implementation:
        - cassert
        - iterator
        - stdexcept
    - type: method
      name: at
      const: true
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: const E
      body: |
        if (index >= size()) throw ::std::out_of_range("index too large");
        return *::std::next(begin(), index);
      includes:
        implementation:
        - cassert
        - iterator
        - stdexcept


  java.util.RandomAccess:
    dev_mode: false
    doc_string: |
      \brief Marker interface.
      \details
      This interface makes more sense in java than in C++.
      In java, it indicates the list has fast random access.


  java.util.PriorityQueue<E>:
    dev_mode: false
    doc_string: |
      \brief Priority queue.
      \attention Java's priority queue is a min-heap, in contrast to the one in C++, which is a max heap.
    fields:
      size:
        visibility: private
        # XXX implement field removal
        rename: xxx_implement_remove_
      data_:
        visibility: private
        type:
          cxx: ::std::vector<$boundTemplateType(java.("E"), "style=type, class")$, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>>
          includes:
            declaration:
            - vector
        default: |
          ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
      comparator:
        final: true
        const: true
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: comparator
        type:
          java: const java.util.Comparator<? super E>
      initializers:
        comparator: std::move(comparator)
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: b, e, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: std::initializer_list<$boundTemplateType(java.("E"), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      initializers:
        data_: init, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: comparator
        type:
          java: java.util.Comparator<? super E>
      initializers:
        data_: b, e, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
        comparator: std::move(comparator)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: std::initializer_list<$boundTemplateType(java.("E"), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      - name: comparator
        type:
          java: java.util.Comparator<? super E>
      initializers:
        data_: init, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
        comparator: std::move(comparator)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: method
      name: compare_
      visibility: private
      arguments:
      - name: x
        type:
          java: E
      - name: y
        type:
          java: E
      return:
        cxx: bool
      body: |
        // Note: java's priority queue is a min-heap, while the C++ one is a max heap.
        // We compare `>0` instead of `<0` to create the min-heap behaviour.
        if (this->comparator == nullptr)
          return $boundTemplateType(java.("java.util.Comparator<E>"), "style=type, class")$::naturalOrder()->compare(std::move(x), std::move(y)) > 0;
        return this->comparator->compare(std::move(x), std::move(y)) > 0;
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      virtual: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: clear
      virtual: true
      body: |
        data_.clear();
    - type: method
      name: push
      virtual: true
      return:
        cxx: void
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_back(std::move(e));
        ::std::push_heap(data_.begin(), data_.end(),
                         [this](const auto& x, const auto& y) {
                           return compare_(x, y);
                         });
    - type: method
      name: pop
      virtual: true
      return:
        cxx: void
      body: |
        ::std::pop_heap(data_.begin(), data_.end(),
                        [this](const auto& x, const auto& y) {
                          return compare_(x, y);
                        });
        data_.pop_back();
    - type: method
      name: front
      virtual: true
      const: true
      return:
        java: const E
      body:
        return data_.front();
    - type: method
      name: back
      virtual: true
      const: true
      return:
        java: const E
      body: |
        return data_.back();
    - type: method
      name: front
      virtual: true
      return:
        java: E
      body:
        return data_.front();
    - type: method
      name: back
      virtual: true
      return:
        java: E
      body: |
        return data_.back();


  java.lang.CharSequence:
    dev_mode: false
    doc_string: |
      \brief Character sequence.
      \details Holds a sequence of characters.

      \attention
      Java uses UTF-16, but in C++ we use UTF-8.
      Therefore our string are UTF-8 sequences and length/index computation is based on 8 bit characters.
    members:
    - type: method
      name: length
      const: true
      noexcept: true
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return size();
      doc_string: |
        \brief Retrieve the size of the string.
        \returns The number of characters in the string.
    - type: method
      name: size
      virtual: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      doc_string: |
        \brief Retrieve the size of the string.
        \returns The number of characters in the string.
    - type: method
      name: empty
      virtual: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      doc_string: |
        \brief Test if this is an empty string.
        \returns True if the string is empty. False otherwise.
      body: |
        return size() == 0u;
    - type: method
      name: at
      virtual: true
      const: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: char
      doc_string: |
        \brief Retrieve the character at the given index from the list.
        \param index Index of the character to be returned.
        \returns Character at the given index.
        \throws std::out_of_range if the index exceeds the string size.
    - type: method
      name: front
      virtual: true
      const: true
      return:
        cxx: char
      doc_string: |
        \brief Front of the string.
        \returns First character of the string.
    - type: method
      name: back
      virtual: true
      const: true
      return:
        cxx: char
      doc_string: |
        \brief Back of the string.
        \returns Last character of the string.
    - type: method
      name: substr
      virtual: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.String
      doc_string: |
        \brief Retrieve a substring.
        \details: Returns the substring starting at \p pos.
        \param pos Starting index for the substring.
        \return String containing everything from \p pos until the end.
        \throws std::out_of_range if \p pos larger than `size()`.
      body: |
        return substr(pos, std::size_t(-1));
    - type: method
      name: substr
      virtual: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: count
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.String
      doc_string: |
        \brief Retrieve a substring.
        \details: Returns the substring starting at \p pos.
        The substring will be at most \p count characters.
        \param pos Starting index for the substring.
        \param count Number of characters to include in the returned string.
        \return String containing up to \p count characters starting at \p pos.
        \throws std::out_of_range if \p pos larger than `size()`.
    - type: method
      name: str
      virtual: true
      const: true
      return:
        cxx: ::std::string
        includes:
          declaration:
          - string
    - type: method
      name: subSequence
      virtual: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.CharSequence
      doc_string: |
        \brief Retrieve a substring.
        \details: Returns the substring starting at \p pos.
        \param pos Starting index for the substring.
        \return CharSequence containing everything from \p pos until the end.
        \throws std::out_of_range if \p pos larger than `size()`.
      body: |
        return subSequence(pos, std::size_t(-1));
    - type: method
      name: subSequence
      virtual: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: count
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.CharSequence
      doc_string: |
        \brief Retrieve a substring.
        \details: Returns the substring starting at \p pos.
        The substring will be at most \p count characters.
        \param pos Starting index for the substring.
        \param count Number of characters to include in the returned string.
        \return CharSequence containing up to \p count characters starting at \p pos.
        \throws std::out_of_range if \p pos larger than `size()`.


  java.lang.Appendable:
    dev_mode: false
    members:
    - type: method
      name: append
      arguments:
      - name: c
        type:
          cxx: char
      doc_string: |
        Append a character to this.
      body: |
        append(::std::string_view(&c, 1));
    - type: method
      name: append
      virtual: true
      arguments:
      - name: s
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      doc_string: |
        Append string to this.
    - type: method
      name: append
      arguments:
      - name: s
        type:
          java: const java.lang.CharSequence
      doc_string: |
        Append string to this.
      body: |
        append(s->str());


  java.lang.AbstractStringBuilder:
    dev_mode: false
    fields:
      value:
        visibility: public
        type:
          cxx: ::std::string
          includes:
            declaration:
            - string
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: s
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      initializers:
        value: s.begin(), s.end()
    - type: method
      name: append
      override: true
      arguments:
      - name: s
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      body: |
        value.append(s.begin(), s.end());
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return value.size();
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return value.empty();
    - type: method
      name: at
      override: true
      const: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: char
      body: |
        return value.at(index);
    - type: method
      name: front
      override: true
      const: true
      return:
        cxx: char
      body: |
        return value.front();
    - type: method
      name: back
      override: true
      const: true
      return:
        cxx: char
      body: |
        return value.back();
    - type: method
      name: str
      override: true
      const: true
      return:
        cxx: ::std::string
        includes:
          declaration:
          - string
      body: |
        return value;
    - type: method
      name: substr
      override: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: count
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.String
      body: |
        return $boundTemplateType(java.({java.lang.String}), "style=type, class")$(
            ::java::allocate,
            std::string_view(this->value).substr(pos, count));


  java.lang.StringBuilder:
    dev_mode: false
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: s
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      super: s
    - type: method
      name: subSequence
      override: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: count
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.StringBuilder
      body: |
        return $boundTemplateType(java.({java.lang.StringBuilder}), "style=type, class")$(
            ::java::allocate,
            std::string_view(this->value).substr(pos, count));


  java.lang.StringBuffer:
    dev_mode: false
    fields:
      value:
        visibility: private
        # XXX implement field removal
        rename: xxx_implement_remove_
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: s
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      super: s
    - type: method
      name: subSequence
      override: true
      const: true
      arguments:
      - name: pos
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: count
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: java.lang.StringBuffer
      body: |
        return $boundTemplateType(java.({java.lang.StringBuffer}), "style=type, class")$(
            ::java::allocate,
            std::string_view(this->value).substr(pos, count));


  java.util.Set<E>:
    dev_mode: false
    doc_string: |
      \brief Java Set interface.
      \details Models a set.
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        static const ::std::size_t nonce = ::java::__hash_nonce();

        // We use XOR combining.
        // It's a really bad algorithm, due to collisions.
        // But it's the only way to keep the computation agnostic of the ordering.
        ::std::size_t h = 0;
        for (const auto& i : *this) h ^= ::std::size_t(hash_combiner(max_cascade) << i);

        return hash_combiner(h, max_cascade)
            << nonce;
      includes:
        implementation:
        - functional
        - cstddef
        - java/hash.h
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        const $erasedType(model)$* casted_other = dynamic_cast<const $erasedType(model)$*>(&other);

        if (casted_other == nullptr) {
          eq.fail();
        } else {
          $erasedType(model)$::__equal_impl__(specialized, eq, *this, *casted_other);
        }
    - type: method
      name: __equal_impl__
      static: true
      visibility: protected
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: x
        type:
          cxx: const $boundTemplateType(java.({java.util.Set<E>}), "style=erased")$&
      - name: y
        type:
          cxx: const $boundTemplateType(java.({java.util.Set<E>}), "style=erased")$&
      body: |
        if (!std::is_permutation(
            x.begin(), x.end(),
            y.begin(), y.end(),
            [&eq](const auto& x, const auto& y) {
              return eq.test(x, y);
            }))
          eq.fail();
      includes:
        implementation:
        - java/reflect.h
        - algorithm
    - type: method
      name: contains
      virtual: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: bool
      doc_string: |
        \brief Test if element is present in this set.
        \param e An element to find.
        \returns True if the element is present in the set. False otherwise.
    - type: method
      name: find
      virtual: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      doc_string: |
        \brief Find element in the set.
        \param e An element to find.
        \returns Iterator to the element, or if the element is absent, an iterator to end.
    - type: method
      name: find
      virtual: true
      arguments:
      - name: e
        type:
          java: E
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      doc_string: |
        \brief Find element in the set.
        \param e An element to find.
        \returns Iterator to the element, or if the element is absent, an iterator to end.
    - type: method
      name: erase
      virtual: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      doc_string: |
        \brief Remove element from the set.
        \param e The element to remove.
        \returns Number of items removed from the set.


  java.util.AbstractSet<E>:
    dev_mode: false
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      final: true
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Set<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Set<E>}), "style=erased")$::__equal__(specialized, eq, other);
    - type: method
      name: contains
      override: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: bool
      doc_string: |
        \brief Test if element is present in this set.
        \param e An element to find.
        \returns True if the element is present in the set. False otherwise.
      body: |
        return find(std::move(e)) != end();


  java.util.Collections$CheckedCollection<E>:
    dev_mode: false
    fields:
      c:
        final: true
        visibility: private
      type:
        const: true
        final: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: c
        type:
          java: java.util.Collection<E>
      - name: type
        type:
          java: java.lang.Class<E>
      initializers:
        c: std::move(c)
        type: std::move(type)
      body: |
        if (!this->c || !this->type)
          throw std::invalid_argument("nullptr argument to java.util.Collections\$CheckedCollection");
    - type: method
      name: check_
      const: true
      visibility: protected
      arguments:
      - name: e
        type:
          java: E
      return:
        java: E
      doc_string: |
        \brief Validate the type of E.
        \throws std::bad_cast if \p e is not an instance of the type of this collection.
      body: |
        return type->cast(e);
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return ::java::_reflect_ops::hash_code(c, max_cascade);
      includes:
        implementation:
        - type_traits
        - functional
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        eq(c, other);
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return c == nullptr || c->empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return (c == nullptr ? 0u : c->size());
    - type: method
      name: clear
      override: true
      body: |
        c->clear();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return c->begin();
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return c->end();
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return c->begin();
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return c->end();
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        return c->insert(check_(std::move(e)));


  java.util.Collections$CheckedList<E>:
    dev_mode: false
    fields:
      list:
        final: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: list
        type:
          java: java.util.List<E>
      - name: type
        type:
          java: java.lang.Class<E>
      super: list, std::move(type)
      initializers:
        list: std::move(list)
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$CheckedCollection<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$CheckedCollection<E>}), "style=erased")$::__equal__(specialized, eq, other);
    - type: method
      name: push_front
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        return list->push_front(check_(std::move(e)));
    - type: method
      name: push_back
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        return list->push_back(check_(std::move(e)));
    - type: method
      name: pop_back
      override: true
      return:
        java: E
      body: |
        return list->pop_back();
    - type: method
      name: pop_front
      override: true
      return:
        java: E
      body: |
        return list->pop_front();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->begin();
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->end();
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->begin();
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->end();
    - type: method
      name: front
      override: true
      const: true
      return:
        java: const E
      body: |
        return list->front();
    - type: method
      name: back
      override: true
      const: true
      return:
        java: const E
      body: |
        return list->back();
    - type: method
      name: front
      override: true
      return:
        java: E
      body: |
        return list->front();
    - type: method
      name: back
      override: true
      return:
        java: E
      body: |
        return list->back();
    - type: method
      name: at
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: E
      body: |
        return list->at(index);
    - type: method
      name: at
      const: true
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: const E
      body: |
        return list->at(index);
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        return list->insert(check_(std::move(e)));


  java.util.Collections$CheckedQueue<E>:
    dev_mode: false
    fields:
      queue:
        final: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: queue
        type:
          java: java.util.Queue<E>
      - name: type
        type:
          java: java.lang.Class<E>
      super: queue, std::move(type)
      initializers:
        queue: std::move(queue)
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        return queue->insert(check_(std::move(e)));
    - type: method
      name: front
      override: true
      const: true
      return:
        java: const E
      body: |
        return queue->front();
    - type: method
      name: back
      override: true
      const: true
      return:
        java: const E
      body: |
        return queue->back();
    - type: method
      name: front
      override: true
      return:
        java: E
      body: |
        return queue->front();
    - type: method
      name: back
      override: true
      return:
        java: E
      body: |
        return queue->back();
    - type: method
      name: pop
      override: true
      return:
        cxx: void
      body: |
        queue->pop();
    - type: method
      name: push
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        return queue->push(check_(std::move(e)));


  java.util.Collections$CheckedSet<E>:
    dev_mode: false
    fields:
      set:
        type:
          java: java.util.Set<E>
        final: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: set
        type:
          java: java.util.Set<E>
      - name: type
        type:
          java: java.lang.Class<E>
      super: set, std::move(type)
      initializers:
        set: std::move(set)
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$CheckedCollection<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$CheckedCollection<E>}), "style=erased")$::__equal__(specialized, eq, other);
    - type: method
      name: contains
      virtual: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: bool
      body: |
        return set->contains(e);
    - type: method
      name: find
      virtual: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return set->find(e);
    - type: method
      name: find
      virtual: true
      arguments:
      - name: e
        type:
          java: E
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return set->find(e);
    - type: method
      name: erase
      virtual: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return set->erase(e);


  java.util.Collections$SynchronizedCollection<E>:
    dev_mode: true
    fields:
      c:
        final: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: c
        type:
          java: java.util.Collection<E>
      initializers:
        c: std::move(c)
      body: |
        if (!this->c)
          throw std::invalid_argument("nullptr argument to java.util.Collections\$SynchronizedCollection");
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return ::java::_reflect_ops::hash_code(c, max_cascade);
      includes:
        implementation:
        - type_traits
        - functional
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        eq(c, other);


  java.util.Collections$SynchronizedList<E>:
    dev_mode: true
    fields:
      list:
        final: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: list
        type:
          java: java.util.List<E>
      super: list
      initializers:
        list: std::move(list)
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        return list->insert(std::move(e));
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$SynchronizedCollection<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$SynchronizedCollection<E>}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.Collections$SynchronizedSet<E>:
    dev_mode: true
    members:
    - type: constructor
      arguments:
      - name: set
        type:
          java: java.util.Set<E>
      super: std::move(set)
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$SynchronizedCollection<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$SynchronizedCollection<E>}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.Collections$UnmodifiableCollection<E>:
    dev_mode: true
    fields:
      c:
        final: true
        const: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: c
        type:
          java: const java.util.Collection<E>
      initializers:
        c: std::move(c)
      body: |
        if (!this->c)
          throw std::invalid_argument("nullptr argument to java.util.Collections\$UnmodifiableCollection");
    - type: method
      name: insert
      override: true
      arguments:
      - name: _e_
        type:
          java: E
      body: |
        throw std::runtime_error("unmodifiable collection");
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return ::java::_reflect_ops::hash_code(c, max_cascade);
      includes:
        implementation:
        - java/reflect.h
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        eq(c, other);


  java.util.Collections$UnmodifiableList<E>:
    dev_mode: true
    fields:
      list:
        final: true
        const: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: list
        type:
          java: const java.util.List<E>
      super: list
      initializers:
        list: std::move(list)
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        throw std::runtime_error("unmodifiable collection");
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$UnmodifiableCollection}), "style=erased")$::__hash_code__(specialized, max_cascade);
      includes:
        implementation:
        - type_traits
        - functional
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        this->$boundTemplateType(java.({java.util.Collections\$UnmodifiableCollection}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.Collections$UnmodifiableSet<E>:
    dev_mode: true
    fields:
      list:
        final: true
        const: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: set
        type:
          java: const java.util.Set<E>
      super: std::move(set)
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$UnmodifiableCollection}), "style=erased")$::__hash_code__(specialized, max_cascade);
      includes:
        implementation:
        - type_traits
        - functional
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        this->$boundTemplateType(java.({java.util.Collections\$UnmodifiableCollection}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.concurrent.CopyOnWriteArrayList<E>:
    dev_mode: true
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.List<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        this->$boundTemplateType(java.({java.util.List<E>}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.concurrent.ConcurrentHashMap$KeySetView<K, V>:
    dev_mode: true
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      final: true
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Set<K>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Set<K>}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.concurrent.ConcurrentHashMap$EntrySetView<K, V>:
    dev_mode: true
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      final: true
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Set<java.util.Map\$Entry<K, V>>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Set<java.util.Map\$Entry<K, V>>}), "style=erased")$::__equal__(specialized, eq, other);


  java.util.HashSet<E>:
    dev_mode: false
    doc_string: |
      \brief Unordered set.
      \details This implementation is based on std::unordered_set.
    fields:
      data_:
        type:
          cxx: ::std::unordered_set<$boundTemplateType(java.({E}), "style=type, class")$, ::std::hash<$boundTemplateType(java.({const E}), "style=type, class")$>, ::std::equal_to<$boundTemplateType(java.({const E}), "style=type, class")$>, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>>
          includes:
            declaration:
            - unordered_set
            - functional
        visibility: private
        default: 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: std::move(b), std::move(e), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<$boundTemplateType(java.({E}), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      initializers:
        data_: std::move(init), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          java: java.lang.Iterable<? extends E>
      initializers:
        data_: init->begin(), init->end(), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.insert(std::move(e));
    - type: method
      name: erase
      override: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.erase(::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e)));
    - type: method
      name: find
      virtual: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<const $boundTemplateType(java.({E}), "style=type")$>(data_.find(::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e))));
    - type: method
      name: find
      virtual: true
      arguments:
      - name: e
        type:
          java: E
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>(data_.find(std::move(e)));
