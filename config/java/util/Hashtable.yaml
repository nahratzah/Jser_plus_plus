---
classes:
  java.util.Hashtable<K, V>:
    dev_mode: false
    doc_string: |
      \brief A hash map.
      \details This is implemented in terms of `std::unordered_map`.
    fields:
      loadFactor:
        omit: true
        encoder_expr: 1.0f
      threshold:
        omit: true
        encoder_expr: data_.size()
      data_:
        type:
          cxx: ::std::unordered_map<$boundTemplateType(java.("K"), "style=type, class=field")$, $boundTemplateType(java.("V"), "style=type, class=field")$, ::std::hash<$boundTemplateType(java.("const K"), "style=type, class")$>, ::std::equal_to<$boundTemplateType(java.("const K"), "style=type, class")$>, ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.("K"), "style=type, class=field")$, $boundTemplateType(java.("V"), "style=type, class=field")$>>>>
          includes:
            declaration:
            - unordered_map
            - functional
            - cycle_ptr/allocator.h
        visibility: private
        default: 8u, ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.("K"), "style=type, class=field")$, $boundTemplateType(java.("V"), "style=type, class=field")$>>>(*this)
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: m
        type:
          java: java.util.Map<? extends K, ? extends V>
      initializers:
        data_: m->begin(), m->end(), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.("K"), "style=type, class=field")$, $boundTemplateType(java.("V"), "style=type, class=field")$>>>(*this)
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: ::std::move(b), ::std::move(e), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.("K"), "style=type, class=field")$, $boundTemplateType(java.("V"), "style=type, class=field")$>>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<::std::pair<const $boundTemplateType(java.("K"), "style=type, class")$, $boundTemplateType(java.("V"), "style=type, class")$>>
          includes:
            declaration:
            - initializer_list
            - utility
      initializers:
        data_: init.begin(), init.end(), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.("K"), "style=type, class=field")$, $boundTemplateType(java.("V"), "style=type, class=field")$>>>(*this)
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::forward_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.begin();
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::forward_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.end();
    - type: method
      name: begin
      override: true
      const: true
      return:
        cxx: ::java::forward_pair_iterator<const $boundTemplateType(java.("K"), "style=type")$, const $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.begin();
    - type: method
      name: end
      override: true
      const: true
      return:
        cxx: ::java::forward_pair_iterator<const $boundTemplateType(java.("K"), "style=type")$, const $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.end();
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: emplace
      override: true
      arguments:
      - name: k
        type:
          java: K
      - name: v
        type:
          java: V
      body: |
        data_.emplace(::std::move(k), ::std::move(v));
    - type: method
      name: find
      override: true
      const: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::forward_pair_iterator<const $boundTemplateType(java.({K}), "style=type")$, const $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.find({ ::cycle_ptr::unowned_cycle, ::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)) });
    - type: method
      name: find
      override: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::forward_pair_iterator<$boundTemplateType(java.({K}), "style=type")$, $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.find({ ::cycle_ptr::unowned_cycle, ::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)) });
    - type: method
      name: __decoder_annotation__
      visibility: private
      arguments:
      - name: decoder
        type:
          cxx: const ::java::serialization::class_decoder<$tagType(model)$>&
          includes:
            declaration:
            - java/serialization/decoder_fwd.h
            implementation:
            - java/serialization/decoder.h
      body: |
        auto annotation = ::java::serialization::annotation_reader(decoder.get_annotation());

        annotation.read_int(); // number of buckets

        auto len = annotation.read_int();
        if (len < 0) throw ::java::serialization::decoding_error($cxxString({$model.name$: negative collection size})$);

        data_.reserve(len);
        ::std::generate_n(
            ::std::inserter(data_, data_.end()),
            ::std::size_t(len),
            [&annotation]() {
              auto first = annotation.read_comparable_object<$boundTemplateType(java.({K}), "style=type, class")$>();
              auto second = annotation.read_initial_object<$boundTemplateType(java.({V}), "style=type, class")$>();
              return ::std::pair<const $boundTemplateType(java.({K}), "style=type, class")$, $boundTemplateType(java.({V}), "style=type, class")$>(::std::move(first), ::std::move(second));
            });

        if (data_.size() != ::std::size_t(len))
          throw ::java::serialization::decoding_error($cxxString({$model.name$: lost elements while loading set})$);
      includes:
        implementation:
        - algorithm
        - iterator
        - utility
        - java/serialization/exception.h
    - type: method
      name: __encoder_annotation__
      visibility: private
      const: true
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
          includes:
            declaration:
            - java/serialization/type_def_fwd.h
      - name: _fields_
        type:
          cxx: ::java::serialization::stream::new_object::class_data::field_map&
          includes:
            declaration:
            - java/serialization/encdec.h
      return:
        cxx: ::std::vector<::std::variant<::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>, ::java::serialization::stream::blockdata>>
        includes:
          declaration:
          - vector
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
          implementation:
          - java/serialization/encdec.h
      body: |
        auto annotation = ::java::serialization::annotation_writer(handler_);

        if (data_.size() > 0x7fffffffu)
          throw ::std::logic_error($cxxString({$model.name$: size too large})$);

        annotation.write_int(data_.size()); // buckets
        annotation.write_int(data_.size());
        for (const auto& i : data_) {
          annotation.write_object(i.first);
          annotation.write_object(i.second);
        }

        return std::move(annotation).data();
      includes:
        implementation:
        - stdexcept
        - java/serialization/writer.h
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      final: true
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Map<K, V>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Map<K, V>}), "style=erased")$::__equal__(specialized, eq, other);
