---
classes:
  java.util.List<E>:
    dev_mode: false
    members:
    - type: method
      name: __hash_code__
      noexcept: true
      virtual: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        static const ::std::size_t nonce = ::java::__hash_nonce();

        auto hc = ::java::hash_combiner(max_cascade)
            << nonce;
        for (const auto& i : *this) hc << i;
        return hc;
      includes:
        implementation:
        - java/hash.h
    - type: method
      name: __equal__
      virtual: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        const $erasedType(model)$* casted_other = dynamic_cast<const $erasedType(model)$*>(&other);
        if (casted_other == nullptr) {
          eq.fail();
        } else {
          $erasedType(model)$::__equal_impl__(specialized, eq, *this, *casted_other);
        }
      includes:
        implementation:
        - java/reflect.h
    - type: method
      name: __equal_impl__
      static: true
      visibility: protected
      arguments:
      - name: _specialized_
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: x
        type:
          cxx: const $boundTemplateType(java.({java.util.List<E>}), "style=erased")$&
      - name: y
        type:
          cxx: const $boundTemplateType(java.({java.util.List<E>}), "style=erased")$&
      body: |
        if (!std::equal(
            x.begin(), x.end(),
            y.begin(), y.end(),
            [&eq](const auto& x, const auto& y) {
              return eq(x, y).ok(); // By returning the `ok()` state, we can bail out early.
            }))
          eq.fail(); // This only makes a difference when there's a length difference.
      includes:
        implementation:
        - java/reflect.h
        - algorithm
    - type: method
      name: push_front
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: push_back
      virtual: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
    - type: method
      name: pop_front
      virtual: true
      return:
        java: E
    - type: method
      name: pop_back
      virtual: true
      return:
        java: E
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: begin
      override: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: end
      override: true
      const: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
    - type: method
      name: front
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      const: true
      return:
        java: const E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: front
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the first element from the queue.
        \returns The first element.
    - type: method
      name: back
      virtual: true
      return:
        java: E
      doc_string: |
        \brief Retrieve the last element from the queue.
        \returns The last element.
    - type: method
      name: push
      virtual: true
      return:
        cxx: void
      arguments:
      - name: e
        type:
          java: E
      body: |
        push_back(std::move(e));
    - type: method
      name: pop
      virtual: true
      return:
        cxx: void
      body: |
        pop_front();
    - type: method
      name: at
      virtual: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: E
      doc_string: |
        \brief Retrieve the element at the given index from the list.
        \param index Index of the element to be returned.
        \returns Element at the given index.
        \throws std::out_of_range if the index exceeds the list size.
    - type: method
      name: at
      const: true
      virtual: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: const E
      doc_string: |
        \brief Retrieve the element at the given index from the list.
        \param index Index of the element to be returned.
        \returns Element at the given index.
        \throws std::out_of_range if the index exceeds the list size.
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        push_back(std::move(e));
      doc_string: |
        \brief Add an element to the end of the list.
