---
classes:
  java.util.Collections$CheckedList<E>:
    dev_mode: false
    fields:
      list:
        final: true
        visibility: private
    members:
    - type: constructor
      arguments:
      - name: list
        type:
          java: java.util.List<E>
      - name: type
        type:
          java: java.lang.Class<E>
      super: list, std::move(type)
      initializers:
        list: std::move(list)
    - type: method
      name: __hash_code__
      noexcept: true
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: max_cascade
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$CheckedCollection<E>}), "style=erased")$::__hash_code__(specialized, max_cascade);
    - type: method
      name: __equal__
      override: true
      const: true
      visibility: protected
      covariant_return: false
      arguments:
      - name: specialized
        type:
          cxx: bool
      - name: eq
        type:
          cxx: ::java::_equal_helper&
          includes:
            declaration:
            - java/object_intf.h
            implementation:
            - java/reflect.h
      - name: other
        type:
          cxx: const ::java::object_intf&
          includes:
            declaration:
            - java/object_intf.h
      body: |
        return this->$boundTemplateType(java.({java.util.Collections\$CheckedCollection<E>}), "style=erased")$::__equal__(specialized, eq, other);
    - type: method
      name: push_front
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        return list->push_front(check_(std::move(e)));
    - type: method
      name: push_back
      override: true
      return:
        cxx: bool
      arguments:
      - name: e
        type:
          java: E
      body: |
        return list->push_back(check_(std::move(e)));
    - type: method
      name: pop_back
      override: true
      return:
        java: E
      body: |
        return list->pop_back();
    - type: method
      name: pop_front
      override: true
      return:
        java: E
      body: |
        return list->pop_front();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->begin();
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->end();
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->begin();
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return list->end();
    - type: method
      name: front
      override: true
      const: true
      return:
        java: const E
      body: |
        return list->front();
    - type: method
      name: back
      override: true
      const: true
      return:
        java: const E
      body: |
        return list->back();
    - type: method
      name: front
      override: true
      return:
        java: E
      body: |
        return list->front();
    - type: method
      name: back
      override: true
      return:
        java: E
      body: |
        return list->back();
    - type: method
      name: at
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: E
      body: |
        return list->at(index);
    - type: method
      name: at
      const: true
      override: true
      arguments:
      - name: index
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      return:
        java: const E
      body: |
        return list->at(index);
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        return list->insert(check_(std::move(e)));
