---
classes:
  java.util.TreeMap<K, V>:
    dev_mode: false
    doc_string: |
      \brief Sorted map.
      \details This is basically Java's `std::map` equavalent.
    friends:
    - java: java.util.TreeMap$NavigableSubMap
    - java: java.util.TreeMap$SubMap
    fields:
      comparator:
        rename: comparator_
        visibility: private
        getter: false
        setter: false
        const: true
        final: true
        decode_complete: true
      data_:
        type:
          cxx: ::std::map<$boundTemplateType(java.({K}), "style=type, class=field")$, $boundTemplateType(java.({V}), "style=type, class=field")$, ::std::decay_t<decltype(::std::bind(&$model.className$::compare_, ::std::declval<$model.className$*>(), ::std::placeholders::_1, ::std::placeholders::_2))>, ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.({K}), "style=type, class=field")$, $boundTemplateType(java.({V}), "style=type, class=field")$>>>>
          includes:
            declaration:
            - map
            - functional
            - type_traits
            - cycle_ptr/allocator.h
            - cycle_ptr/cycle_ptr.h
        getter: false
        setter: false
        default: ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.({K}), "style=type, class=field")$, $boundTemplateType(java.({V}), "style=type, class=field")$>>>(*this)
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: m
        type:
          java: java.util.Map<? extends K, ? extends V>
      initializers:
        data_: m->begin(), m->end(), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.({K}), "style=type, class=field")$, $boundTemplateType(java.({V}), "style=type, class=field")$>>>(*this)
      includes:
        declaration:
        - functional
        - cycle_ptr/allocator.h
        - cycle_ptr/cycle_ptr.h
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: ::std::move(b), ::std::move(e), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.({K}), "style=type, class=field")$, $boundTemplateType(java.({V}), "style=type, class=field")$>>>(*this)
      includes:
        declaration:
        - functional
        - cycle_ptr/allocator.h
        - cycle_ptr/cycle_ptr.h
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<::std::pair<const $boundTemplateType(java.("K"), "style=type, class")$, $boundTemplateType(java.("V"), "style=type, class")$>>
          includes:
            declaration:
            - initializer_list
            - utility
      initializers:
        data_: init.begin(), init.end(), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<::std::pair<const $boundTemplateType(java.({K}), "style=type, class=field")$, $boundTemplateType(java.({V}), "style=type, class=field")$>>>(*this)
      includes:
        declaration:
        - functional
        - cycle_ptr/allocator.h
        - cycle_ptr/cycle_ptr.h
    - type: method
      name: comparator
      const: true
      override: true
      return:
        java: const java.util.Comparator<? super K>
      body: |
        return comparator_;
    - type: method
      name: compare_
      visibility: private
      arguments:
      - name: x
        type:
          java: const K
      - name: y
        type:
          java: const K
      return:
        cxx: bool
      body: |
        if (this->comparator_ == nullptr)
          return $boundTemplateType(java.("java.util.Comparator<K>"), "style=type, class")$::naturalOrder()->compare(std::move(x), std::move(y)) > 0;
        return this->comparator_->compare(std::move(x), std::move(y)) < 0;
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_pair_iterator<$boundTemplateType(java.("K"), "style=type")$, $boundTemplateType(java.("V"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_pair_iterator<const $boundTemplateType(java.("K"), "style=type")$, const $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_pair_iterator<const $boundTemplateType(java.("K"), "style=type")$, const $boundTemplateType(java.("V"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_pair_iterator<const $boundTemplateType(java.("K"), "style=type")$, const $boundTemplateType(java.("V"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_pair_iterator<const $boundTemplateType(java.("K"), "style=type")$, const $boundTemplateType(java.("V"), "style=type")$>(data_.end());
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: emplace
      override: true
      arguments:
      - name: k
        type:
          java: K
      - name: v
        type:
          java: V
      body: |
        data_.emplace(::std::move(k), ::std::move(v));
    - type: method
      name: find
      override: true
      const: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::bidirectional_pair_iterator<const $boundTemplateType(java.({K}), "style=type")$, const $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.find(::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)));
    - type: method
      name: find
      override: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::bidirectional_pair_iterator<$boundTemplateType(java.({K}), "style=type")$, $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.find(::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)));
    - type: method
      name: front
      virtual: true
      const: true
      return:
        cxx: ::std::pair<const $boundTemplateType(java.({const K}), "style=type, class")$, $boundTemplateType(java.({const V}), "style=type, class")$>
        includes:
          declaration:
          - utility
      body: |
        return *data_.begin();
    - type: method
      name: back
      virtual: true
      const: true
      return:
        cxx: ::std::pair<const $boundTemplateType(java.({const K}), "style=type, class")$, $boundTemplateType(java.({const V}), "style=type, class")$>
        includes:
          declaration:
          - utility
      body: |
        return *data_.rbegin();
    - type: method
      name: front
      virtual: true
      return:
        cxx: ::std::pair<const $boundTemplateType(java.({K}), "style=type, class")$, $boundTemplateType(java.({V}), "style=type, class")$>
        includes:
          declaration:
          - utility
      body: |
        return *data_.begin();
    - type: method
      name: back
      virtual: true
      return:
        cxx: ::std::pair<const $boundTemplateType(java.({K}), "style=type, class")$, $boundTemplateType(java.({V}), "style=type, class")$>
        includes:
          declaration:
          - utility
      body: |
        return *data_.rbegin();
    - type: method
      name: __decoder_annotation__
      visibility: private
      arguments:
      - name: decoder
        type:
          cxx: const ::java::serialization::class_decoder<$tagType(model)$>&
          includes:
            declaration:
            - java/serialization/decoder_fwd.h
            implementation:
            - java/serialization/decoder.h
      body: |
        auto annotation = ::java::serialization::annotation_reader(decoder.get_annotation());

        auto len = annotation.read_int();
        if (len < 0) throw ::java::serialization::decoding_error($cxxString({$model.name$: negative collection size})$);

        ::std::generate_n(
            ::std::inserter(data_, data_.end()),
            ::std::size_t(len),
            [&annotation]() {
              auto first = annotation.read_comparable_object<$boundTemplateType(java.({K}), "style=type, class")$>();
              auto second = annotation.read_initial_object<$boundTemplateType(java.({V}), "style=type, class")$>();
              return ::std::pair<const $boundTemplateType(java.({K}), "style=type, class")$, $boundTemplateType(java.({V}), "style=type, class")$>(::std::move(first), ::std::move(second));
            });

        if (data_.size() != ::std::size_t(len))
          throw ::java::serialization::decoding_error($cxxString({$model.name$: lost elements while loading set})$);
      includes:
        implementation:
        - algorithm
        - iterator
        - utility
        - java/serialization/exception.h
    - type: method
      name: __encoder_annotation__
      visibility: private
      const: true
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
          includes:
            declaration:
            - java/serialization/type_def_fwd.h
      - name: _fields_
        type:
          cxx: ::java::serialization::stream::new_object::class_data::field_map&
          includes:
            declaration:
            - java/serialization/encdec.h
      return:
        cxx: ::std::vector<::std::variant<::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>, ::java::serialization::stream::blockdata>>
        includes:
          declaration:
          - vector
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
          implementation:
          - java/serialization/encdec.h
      body: |
        auto annotation = ::java::serialization::annotation_writer(handler_);

        if (data_.size() > 0x7fffffffu)
          throw ::std::logic_error($cxxString({$model.name$: size too large})$);

        annotation.write_int(data_.size());
        for (const auto& i : data_) {
          annotation.write_object(i.first);
          annotation.write_object(i.second);
        }

        return std::move(annotation).data();
      includes:
        implementation:
        - stdexcept
        - java/serialization/writer.h
    - type: method
      name: lower_bound
      override: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::bidirectional_pair_iterator<$boundTemplateType(java.({K}), "style=type")$, $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.lower_bound(::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)));
    - type: method
      name: lower_bound
      const: true
      override: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::bidirectional_pair_iterator<const $boundTemplateType(java.({K}), "style=type")$, const $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.lower_bound(::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)));
    - type: method
      name: upper_bound
      override: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::bidirectional_pair_iterator<$boundTemplateType(java.({K}), "style=type")$, $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.upper_bound(::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)));
    - type: method
      name: upper_bound
      const: true
      override: true
      arguments:
      - name: k
        type:
          java: const K
      return:
        cxx: ::java::bidirectional_pair_iterator<const $boundTemplateType(java.({K}), "style=type")$, const $boundTemplateType(java.({V}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return data_.upper_bound(::java::constcast<$boundTemplateType(java.({K}), "style=type, class")$>(::std::move(k)));
