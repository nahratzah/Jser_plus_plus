---
classes:
  java.util.TreeSet<E>:
    dev_mode: false
    suppress_local:
    - java.lang.Cloneable/clone
    doc_string: |
      \brief A tree set of elements.
      \details Implemented in terms of std::set.
    fields:
      comparator_:
        type:
          java: java.util.Comparator<? super E>
        visibility: private
        getter: false
        setter: false
        const: true
        final: true
      data_:
        type:
          cxx: ::std::set<$boundTemplateType(java.({E}), "style=type, class=field")$, ::std::decay_t<decltype(::std::bind(&$model.className$::compare_, ::std::declval<$model.className$*>(), ::std::placeholders::_1, ::std::placeholders::_2))>, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>>
          includes:
            declaration:
            - set
            - functional
            - type_traits
            - cycle_ptr/allocator.h
            - cycle_ptr/cycle_ptr.h
        getter: false
        setter: false
        default: ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: std::move(b), std::move(e), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<$boundTemplateType(java.({E}), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      initializers:
        data_: init.begin(), init.end(), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          java: java.lang.Iterable<? extends E>
      initializers:
        data_: init->begin(), init->end(), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
    - type: constructor
      arguments:
      - name: cmp
        type:
          java: const java.util.Comparator<? super E>
      initializers:
        comparator_: std::move(cmp)
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: cmp
        type:
          java: const java.util.Comparator<? super E>
      initializers:
        comparator_: std::move(cmp)
        data_: std::move(b), std::move(e), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<$boundTemplateType(java.({E}), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      - name: cmp
        type:
          java: const java.util.Comparator<? super E>
      initializers:
        comparator_: std::move(cmp)
        data_: init.begin(), init.end(), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          java: java.lang.Iterable<? extends E>
      - name: cmp
        type:
          java: const java.util.Comparator<? super E>
      initializers:
        comparator_: std::move(cmp)
        data_: init->begin(), init->end(), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
# XXX This trips ambiguity with Iterable constructor.
# XXX So we disable it for now.
# XXX Note that due to the ambiguity, we can not select this constructor for clone,
# XXX thus necesitating local suppression of clone && manual implementation.
#    - type: constructor
#      arguments:
#      - name: init
#        type:
#          java: java.util.SortedSet<E>
#      initializers:
#        comparator_: init->comparator()
#        data_: init->begin(), init->end(), ::std::bind(&$erasedType(model)$::compare_, this, ::std::placeholders::_1, ::std::placeholders::_2), ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class=field")$>>(*this)
    - type: method
      name: comparator
      const: true
      override: true
      return:
        java: const java.util.Comparator<? super E>
      body: |
        return comparator_;
    - type: method
      name: compare_
      visibility: private
      arguments:
      - name: x
        type:
          java: E
      - name: y
        type:
          java: E
      return:
        cxx: bool
      body: |
        if (this->comparator_ == nullptr)
          return $boundTemplateType(java.("java.util.Comparator<E>"), "style=type, class")$::naturalOrder()->compare(std::move(x), std::move(y)) > 0;
        return this->comparator_->compare(std::move(x), std::move(y)) < 0;
    - type: method
      name: front
      override: true
      const: true
      return:
        java: const E
      body: |
        return *data_.begin();
    - type: method
      name: back
      override: true
      const: true
      return:
        java: const E
      body: |
        return *data_.rbegin();
    - type: method
      name: front
      override: true
      return:
        java: E
      body: |
        return *data_.begin();
    - type: method
      name: back
      override: true
      return:
        java: E
      body: |
        return *data_.rbegin();
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.insert(std::move(e));
    - type: method
      name: erase
      override: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.erase({ ::cycle_ptr::unowned_cycle, ::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e)) });
    - type: method
      name: find
      override: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.({E}), "style=type")$>(data_.find({ ::cycle_ptr::unowned_cycle, ::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e)) }));
    - type: method
      name: find
      override: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::java::bidirectional_iterator<$boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<$boundTemplateType(java.({E}), "style=type")$>(data_.find({ ::cycle_ptr::unowned_cycle, ::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e)) }));
    - type: method
      name: __decoder_annotation__
      visibility: private
      arguments:
      - name: decoder
        type:
          cxx: const ::java::serialization::class_decoder<$tagType(model)$>&
          includes:
            declaration:
            - java/serialization/decoder_fwd.h
            implementation:
            - java/serialization/decoder.h
      body: |
        auto annotation = ::java::serialization::annotation_reader(decoder.get_annotation());

        assert(data_.empty());
        const_cast<$boundTemplateType(java.({const java.util.Comparator<? super E>}), "style=type, class=field")$&>(comparator_) = annotation.read_complete_object<$boundTemplateType(java.({java.util.Comparator<? super E>}), "style=type, class=field")$>();

        auto len = annotation.read_int();
        if (len < 0) throw ::java::serialization::decoding_error($cxxString({$model.name$: negative collection size})$);

        ::std::generate_n(
            ::std::inserter(data_, data_.end()),
            ::std::size_t(len),
            [&annotation, this]() {
              if (comparator_ != nullptr)
                return annotation.read_complete_object<$boundTemplateType(java.({E}), "style=type, class")$>();
              else
                return annotation.read_comparable_object<$boundTemplateType(java.({E}), "style=type, class")$>();
            });

        if (data_.size() != ::std::size_t(len))
          throw ::java::serialization::decoding_error($cxxString({$model.name$: lost elements while loading set})$);
      includes:
        implementation:
        - cassert
        - algorithm
        - iterator
        - java/serialization/exception.h
    - type: method
      name: __encoder_annotation__
      visibility: private
      const: true
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
          includes:
            declaration:
            - java/serialization/type_def_fwd.h
      - name: _fields_
        type:
          cxx: ::java::serialization::stream::new_object::class_data::field_map&
          includes:
            declaration:
            - java/serialization/encdec.h
      return:
        cxx: ::std::vector<::std::variant<::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>, ::java::serialization::stream::blockdata>>
        includes:
          declaration:
          - vector
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
          implementation:
          - java/serialization/encdec.h
      body: |
        auto annotation = ::java::serialization::annotation_writer(handler_);

        if (data_.size() > 0x7fffffffu)
          throw ::std::logic_error($cxxString({$model.name$: size too large})$);

        annotation.write_object(comparator_);
        annotation.write_int(data_.size());
        for (const auto& i : data_) annotation.write_object(i);

        return std::move(annotation).data();
      includes:
        implementation:
        - stdexcept
        - java/serialization/writer.h
    - type: method
      name: clone
      override: true
      return:
        java: this
      body: |
        $if (model.devMode)$
        return nullptr; // Be nice to dev-mode implementations.
        $else$
        return $boundTemplateType(java.({this}), "style=type, class")$(::java::allocate,
            $boundTemplateType(java.({this}), "style=type, class")$(
                ::java::_direct(),
                this->shared_from_this(this)),
            comparator());
        $endif$
