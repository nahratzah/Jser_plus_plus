---
classes:
  java.util.PriorityQueue<E>:
    dev_mode: false
    doc_string: |
      \brief Priority queue.
      \attention Java's priority queue is a min-heap, in contrast to the one in C++, which is a max heap.
    fields:
      size:
        omit: true
      data_:
        visibility: private
        type:
          cxx: ::std::vector<$boundTemplateType(java.("E"), "style=type, class")$, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>>
          includes:
            declaration:
            - vector
        default: |
          ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
      comparator:
        final: true
        const: true
        decode_complete: true
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: comparator
        type:
          java: const java.util.Comparator<? super E>
      initializers:
        comparator: std::move(comparator)
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: b, e, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: std::initializer_list<$boundTemplateType(java.("E"), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      initializers:
        data_: init, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: comparator
        type:
          java: java.util.Comparator<? super E>
      initializers:
        data_: b, e, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
        comparator: std::move(comparator)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: std::initializer_list<$boundTemplateType(java.("E"), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      - name: comparator
        type:
          java: java.util.Comparator<? super E>
      initializers:
        data_: init, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.("E"), "style=type, class")$>>(*this)
        comparator: std::move(comparator)
      body: |
        std::make_heap(data_.begin(), data_.end(),
                       [this](const auto& x, const auto& y) {
                         return compare_(x, y);
                       });
      includes:
        implementation:
        - algorithm
    - type: method
      name: compare_
      visibility: private
      arguments:
      - name: x
        type:
          java: E
      - name: y
        type:
          java: E
      return:
        cxx: bool
      body: |
        // Note: java's priority queue is a min-heap, while the C++ one is a max heap.
        // We compare `>0` instead of `<0` to create the min-heap behaviour.
        if (this->comparator == nullptr)
          return $boundTemplateType(java.("java.util.Comparator<E>"), "style=type, class")$::naturalOrder()->compare(std::move(x), std::move(y)) > 0;
        return this->comparator->compare(std::move(x), std::move(y)) > 0;
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::bidirectional_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: push
      override: true
      return:
        cxx: void
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.push_back(std::move(e));
        ::std::push_heap(data_.begin(), data_.end(),
                         [this](const auto& x, const auto& y) {
                           return compare_(x, y);
                         });
    - type: method
      name: pop
      override: true
      return:
        cxx: void
      body: |
        ::std::pop_heap(data_.begin(), data_.end(),
                        [this](const auto& x, const auto& y) {
                          return compare_(x, y);
                        });
        data_.pop_back();
    - type: method
      name: front
      override: true
      const: true
      return:
        java: const E
      body:
        return data_.front();
    - type: method
      name: back
      override: true
      const: true
      return:
        java: const E
      body: |
        return data_.back();
    - type: method
      name: front
      override: true
      return:
        java: E
      body:
        return data_.front();
    - type: method
      name: back
      override: true
      return:
        java: E
      body: |
        return data_.back();
    - type: method
      name: __decoder_annotation__
      visibility: private
      arguments:
      - name: decoder
        type:
          cxx: const ::java::serialization::class_decoder<$tagType(model)$>&
          includes:
            declaration:
            - java/serialization/decoder_fwd.h
            implementation:
            - java/serialization/decoder.h
      body: |
        using namespace ::std::string_view_literals;
        using conversion_type = ::std::wstring_convert<
            std::codecvt_utf8_utf16<char16_t>,
            char16_t>;

        auto annotation = ::java::serialization::annotation_reader(decoder.get_annotation());

        auto len = decoder.get_primitive_field<$boundTemplateType(java.({int}), "style=type, class")$>($u16StringView("size")$);
        if (len < 0) throw ::java::serialization::decoding_error($cxxString({$model.name$: negative collection size})$);

        annotation.read_int(); // discard unused capacity field

        data_.reserve(len);
        ::std::generate_n(
            ::std::back_inserter(data_),
            ::std::size_t(len),
            [&annotation, this]() {
              if (comparator != nullptr)
                return annotation.read_complete_object<$boundTemplateType(java.({E}), "style=type, class")$>();
              else
                return annotation.read_comparable_object<$boundTemplateType(java.({E}), "style=type, class")$>();
            });

        // If the comparator doesn't follow the same ordering, we need to re-order the collection to maintain the heap invariant.
        if (!::std::is_heap(data_.begin(), data_.end(),
                            [this](const auto& x, const auto& y) {
                              return compare_(x, y);
                            })) {
          std::make_heap(data_.begin(), data_.end(),
                         [this](const auto& x, const auto& y) {
                           return compare_(x, y);
                         });
        }
      includes:
        implementation:
        - algorithm
        - iterator
        - string_view
    - type: method
      name: __encoder_annotation__
      visibility: private
      const: true
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
          includes:
            declaration:
            - java/serialization/type_def_fwd.h
      - name: fields
        type:
          cxx: ::java::serialization::stream::new_object::class_data::field_map&
          includes:
            declaration:
            - java/serialization/encdec.h
      return:
        cxx: ::std::vector<::std::variant<::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>, ::java::serialization::stream::blockdata>>
        includes:
          declaration:
          - vector
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
          implementation:
          - java/serialization/encdec.h
      body: |
        using namespace ::std::string_view_literals;
        using namespace ::java::serialization::stream;

        auto annotation = ::java::serialization::annotation_writer(handler_);

        if (data_.size() > 0x7ffffffeu) // One less than max, because of how capacity is written out.
          throw ::std::logic_error($cxxString({$model.name$: size too large})$);

        new_object::class_data::set_field(
            fields,
            $u16StringView("size")$,
            primitive_desc::value_type(::std::in_place_type<$boundTemplateType(java.({int}), "style=type, class")$>, data_.size()));

        // capacity
        if (data_.empty())
          annotation.write_int(2);
        else
          annotation.write_int(data_.size() + 1u);

        for (const auto& i : data_) annotation.write_object(i);

        return std::move(annotation).data();
      includes:
        implementation:
        - stdexcept
        - java/serialization/writer.h
        - java/serialization/encdec.h
        - string_view
