---
classes:
  java.util.HashSet<E>:
    dev_mode: false
    doc_string: |
      \brief Unordered set.
      \details This implementation is based on std::unordered_set.
    fields:
      data_:
        type:
          cxx: ::std::unordered_set<$boundTemplateType(java.({E}), "style=type, class")$, ::std::hash<$boundTemplateType(java.({const E}), "style=type, class")$>, ::std::equal_to<$boundTemplateType(java.({const E}), "style=type, class")$>, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>>
          includes:
            declaration:
            - unordered_set
            - functional
            - cycle_ptr/allocator.h
        visibility: private
        default: 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    members:
    - type: constructor
    - type: constructor
      arguments:
      - name: b
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      - name: e
        type:
          cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
          includes:
            declaration:
            - java/iterator.h
      initializers:
        data_: std::move(b), std::move(e), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          cxx: ::std::initializer_list<$boundTemplateType(java.({E}), "style=type, class")$>
          includes:
            declaration:
            - initializer_list
      initializers:
        data_: std::move(init), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    - type: constructor
      arguments:
      - name: init
        type:
          java: java.lang.Iterable<? extends E>
      initializers:
        data_: init->begin(), init->end(), 8u, ::cycle_ptr::cycle_allocator<::std::allocator<$boundTemplateType(java.({E}), "style=type, class")$>>(*this)
    - type: method
      name: begin
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      override: true
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: begin
      const: true
      override: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.begin());
    - type: method
      name: end
      const: true
      override: true
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<const $boundTemplateType(java.("E"), "style=type")$>(data_.end());
    - type: method
      name: empty
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: bool
      body: |
        return data_.empty();
    - type: method
      name: size
      override: true
      const: true
      noexcept: true
      covariant_return: false
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.size();
    - type: method
      name: clear
      override: true
      body: |
        data_.clear();
    - type: method
      name: insert
      override: true
      arguments:
      - name: e
        type:
          java: E
      body: |
        data_.insert(std::move(e));
    - type: method
      name: erase
      override: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::std::size_t
        includes:
          declaration:
          - cstddef
      body: |
        return data_.erase(::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e)));
    - type: method
      name: find
      override: true
      const: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::java::forward_iterator<const $boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<const $boundTemplateType(java.({E}), "style=type")$>(data_.find(::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e))));
    - type: method
      name: find
      override: true
      arguments:
      - name: e
        type:
          java: const E
      return:
        cxx: ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>
        includes:
          declaration:
          - java/iterator.h
      body: |
        return ::java::forward_iterator<$boundTemplateType(java.({E}), "style=type")$>(data_.find(::java::constcast<$boundTemplateType(java.({E}), "style=type, class")$>(std::move(e))));
    - type: method
      name: __decoder_annotation__
      visibility: private
      arguments:
      - name: decoder
        type:
          cxx: const ::java::serialization::class_decoder<$tagType(model)$>&
          includes:
            declaration:
            - java/serialization/decoder_fwd.h
            implementation:
            - java/serialization/decoder.h
      body: |
        auto annotation = ::java::serialization::annotation_reader(decoder.get_annotation());

        annotation.read_int(); // capacity
        annotation.read_float(); // load factor

        auto len = annotation.read_int();
        if (len < 0) throw ::java::serialization::decoding_error($cxxString({$model.name$: negative collection size})$);

        data_.reserve(len);
        ::std::generate_n(
            ::std::inserter(data_, data_.end()),
            ::std::size_t(len),
            [&annotation]() {
              return annotation.read_comparable_object<$boundTemplateType(java.({E}), "style=type, class")$>();
            });

        if (data_.size() != ::std::size_t(len))
          throw ::java::serialization::decoding_error($cxxString({$model.name$: lost elements while loading set})$);
      includes:
        implementation:
        - algorithm
        - iterator
        - java/serialization/exception.h
    - type: method
      name: __encoder_annotation__
      visibility: private
      const: true
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
          includes:
            declaration:
            - java/serialization/type_def_fwd.h
      - name: _fields_
        type:
          cxx: ::java::serialization::stream::new_object::class_data::field_map&
          includes:
            declaration:
            - java/serialization/encdec.h
      return:
        cxx: ::std::vector<::std::variant<::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>, ::java::serialization::stream::blockdata>>
        includes:
          declaration:
          - vector
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
          implementation:
          - java/serialization/encdec.h
      body: |
        auto annotation = ::java::serialization::annotation_writer(handler_);

        if (data_.size() > 0x7fffffffu)
          throw ::std::logic_error($cxxString({$model.name$: size too large})$);

        annotation.write_int(data_.size()); // capacity
        annotation.write_float(1); // load factor
        annotation.write_int(data_.size());
        for (const auto& i : data_) annotation.write_object(i);

        return std::move(annotation).data();
      includes:
        implementation:
        - stdexcept
        - java/serialization/writer.h
