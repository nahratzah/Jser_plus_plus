---
classes:
  java.lang.Throwable:
    dev_mode: false
    doc_string: |
      \brief The root of all java exceptions.
      \details
      Java divides exceptions into three categories.

      1. java.lang.Exception are checked exceptions.
      2. java.lang.RuntimeExceptions are unchecked exceptions.
      3. java.lang.Error indicate problems in the virtual machine.
         They are always unchecked.

      Throwable is the root of all three, and for something to be thrown,
      it must derive from Throwable.
    fields:
      stackTrace:
        decode_complete: true
      detailMessage:
        rename: message
      cause:
        rename: cause_
        visibility: private
        getter: false
        setter: false
    members:
    - type: constructor
      initializers:
        cause_: ::java::_direct(), this->shared_from_this(this)
    - type: constructor
      arguments:
      - name: cause
        type:
          java: java.lang.Throwable
      initializers:
        cause_: ::std::move(cause)
      body: |
        using namespace ::std::literals;

        if (cause_ != nullptr) {
          message = $boundTemplateType(java.({java.lang.String}), "style=type, class")$(
              ::java::allocate,
              ::java::get_class(cause_)->name() + (cause_->message() != nullptr ? ": " + cause_->message()->value() : $u8String("")$));
        }
    - type: constructor
      arguments:
      - name: message
        type:
          java: java.lang.String
      initializers:
        message: ::std::move(message)
        cause_: ::java::_direct(), this->shared_from_this(this)
    - type: constructor
      arguments:
      - name: message
        type:
          java: java.lang.String
      - name: cause
        type:
          java: java.lang.Throwable
      initializers:
        message: ::std::move(message)
        cause_: ::std::move(cause)
    - type: method
      name: cause
      return:
        java: java.lang.Throwable
      doc_string: |
        \brief Get the exception that caused this exception.
        \return Exception that caused this exception, or a `nullptr` if there is none.
      body: |
        if (cause_ == nullptr || cause_ == $boundTemplateType(model.constPackType, "style=type, class")$(::java::_direct(), this->shared_from_this(this)))
          return nullptr;
        return cause_;
    - type: method
      name: cause
      const: true
      return:
        java: const java.lang.Throwable
      doc_string: |
        \brief Get the exception that caused this exception.
        \return Exception that caused this exception, or a `nullptr` if there is none.
      body: |
        if (cause_ == nullptr || cause_ == $boundTemplateType(model.constPackType, "style=type, class")$(::java::_direct(), this->shared_from_this(this)))
          return nullptr;
        return cause_;
    - type: method
      name: cause
      arguments:
      - name: newCause
        type:
          java: java.lang.Throwable
      doc_string: |
        \brief Set the exception that caused this exception.
        \param newCause The new cause to assign as this exception's cause. May be nullptr.
      body: |
        cause_ = ::std::move(newCause);
      includes:
        implementation:
        - utility
    - type: method
      name: write
      const: true
      arguments:
      - name: out
        type:
          cxx: ::std::ostream&
          includes:
            declaration:
            - iosfwd
            implementation:
            - ostream
      return:
        cxx: ::std::ostream&
        includes:
          declaration:
          - iosfwd
          implementation:
          - ostream
      doc_string: |
        \brief Write this $model.className$ to \p out.
        \param[out] out The stream to write this throwable to.
        \returns \p out
      body: |
        using namespace ::std::string_view_literals;

        return write(out, u8""sv);
    - type: method
      name: write
      const: true
      arguments:
      - name: out
        type:
          cxx: ::std::ostream&
          includes:
            declaration:
            - iosfwd
            implementation:
            - ostream
      - name: indent
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      return:
        cxx: ::std::ostream&
        includes:
          declaration:
          - iosfwd
          implementation:
          - ostream
      doc_string: |
        \brief Write this $model.className$ to \p out.
        \param[out] out The stream to write this throwable to.
        \param[in] indent Indentation to apply.
        \returns \p out
      body: |
        using namespace ::std::string_view_literals;

        ::std::unordered_set<$boundTemplateType(java.({const java.lang.Throwable}), "style=type, class")$> recurs;
        return write(out, indent, u8""sv, recurs);
      includes:
        implementation:
        - unordered_set
    - type: method
      name: write
      const: true
      visibility: private
      arguments:
      - name: out
        type:
          cxx: ::std::ostream&
          includes:
            declaration:
            - iosfwd
            implementation:
            - ostream
      - name: indent
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      - name: caption
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      - name: recurs
        type:
          cxx: ::std::unordered_set<$boundTemplateType(java.({const java.lang.Throwable}), "style=type, class")$>&
          includes:
            declaration:
            - unordered_set
      return:
        cxx: ::std::ostream&
        includes:
          declaration:
          - iosfwd
          implementation:
          - ostream
      doc_string: |
        \brief Write this $model.className$ to \p out.
        \param[out] out The stream to write this throwable to.
        \param[in] indent Indentation to apply.
        \param[in] caption Caption to emit.
        \param[in,out] recurs Previously visited Throwables. We'll add ourselves.
        \returns \p out
      body: |
        using namespace ::std::string_view_literals;

        const auto self = $boundTemplateType(model.constPackType, "style=type, class")$(::java::_direct(), this->shared_from_this(this));
        const bool recursion = !recurs.insert(self).second;

        out << indent;
        out << caption;
        if (recursion) out << "[CIRCULAR REFERENCE: ";
        out << ::java::get_class(self)->name();
        if (message != nullptr) out << ": " << message->value();
        if (recursion) out << "]";
        out << u8"\n"sv;
        if (recursion) return out;

        if (stackTrace != nullptr) {
          ::std::string childIndent;
          childIndent.reserve(indent.size() + 4u);
          childIndent.append(indent.begin(), indent.end());
          childIndent.append(u8"\tat ");

          writeStackTrace(out, childIndent);
        }

        if (suppressedExceptions != nullptr) {
          ::std::string childIndent;
          childIndent.reserve(indent.size() + 1u);
          childIndent.append(indent.begin(), indent.end());
          childIndent.append(u8"\t");

          for (auto i = suppressedExceptions->begin(), e = suppressedExceptions->end();
              i != e;
              ++i)
            i->write(out, childIndent, $u8StringView({Suppressed: })$, recurs);
        }

        const auto thisCause = cause();
        if (thisCause != nullptr)
          thisCause->write(out, indent, $u8StringView({Caused by: })$, recurs);

        return out;
    - type: method
      name: __encoder_annotation__
      visibility: private
      const: true
      arguments:
      - name: handler_
        type:
          cxx: ::java::serialization::cycle_handler&
          includes:
            declaration:
            - java/serialization/type_def_fwd.h
      - name: fields
        type:
          cxx: ::java::serialization::stream::new_object::class_data::field_map&
          includes:
            declaration:
            - java/serialization/encdec.h
      return:
        cxx: ::std::vector<::std::variant<::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>, ::java::serialization::stream::blockdata>>
        includes:
          declaration:
          - vector
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
          implementation:
          - java/serialization/encdec.h
      body: |
        using namespace ::java::serialization::stream;
        using namespace ::std::string_view_literals;

        if (stackTrace == nullptr) {
          new_object::class_data::set_field(
              fields,
              $u16StringView("stackTrace")$,
              object_desc::value_type(handler_.encode_field(_nullStackTrace_())));
        }

        return {};
      includes:
        implementation:
        - string_view
    - type: method
      name: __decoder_annotation__
      visibility: private
      arguments:
      - name: _decoder_
        type:
          cxx: const ::java::serialization::class_decoder<$tagType(model)$>&
          includes:
            declaration:
            - java/serialization/decoder_fwd.h
            implementation:
            - java/serialization/decoder.h
      body: |
        if (stackTrace == _nullStackTrace_())
          stackTrace = nullptr;
        if (suppressedExceptions != nullptr)
          suppressedExceptions = $boundTemplateType(java.({java.util.ArrayList<java.lang.Throwable>}), "style=type, class")$(::java::allocate, suppressedExceptions->begin(), suppressedExceptions->end());
    - type: method
      name: _nullStackTrace_
      static: true
      visibility: private
      return:
        java: java.lang.StackTraceElement[]
      doc_string: |
        \brief Sentinel indicating null trace.
        \details Java uses a sentinel for absent traces during encoding and decoding. We don't.
      body: |
        return $boundTemplateType(java.({java.lang.StackTraceElement[]}), "style=type, class")$(
            ::java::allocate,
            { $boundTemplateType(java.({java.lang.StackTraceElement}), "style=type, class")$(
                  ::java::allocate,
                  "",
                  "",
                  nullptr,
                  ::std::numeric_limits<$boundTemplateType(java.({int}), "style=type, class")$>::min()) });
    - type: method
      name: fillStackTrace
      arguments:
      - name: skip
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      - name: maxDepth
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      doc_string: |
        \brief Fill the stack trace.
        \param skip The number of levels to skip.
        This is counted relative to the call-site of this function.
        \param maxDepth The maximum depth of the stack trace.
      body: |
        // We add 1 to the skip depth, to exclude the fillStackTrace function.
        const auto trace = ::boost::stacktrace::stacktrace(skip + 1u, maxDepth);

        auto traceElements = $boundTemplateType(java.({java.lang.StackTraceElement[]}), "style=type, class")$(::java::allocate);
        for (const ::boost::stacktrace::frame& f : trace) {
          const auto name = f.name();
          if (name.empty()) {
            traceElements.push_back($boundTemplateType(java.({java.lang.StackTraceElement}), "style=type, class")$(
                ::java::allocate,
                "",
                ::boost::stacktrace::to_string(f),
                nullptr,
                -1));
          } else {
            const auto frame_source = f.source_file();
            const auto frame_line = f.source_line();

            $boundTemplateType(java.({java.lang.String}), "style=type, class")$ method = $boundTemplateType(java.({java.lang.String}), "style=type, class")$(::java::allocate, name);
            $boundTemplateType(java.({java.lang.String}), "style=type, class")$ declaringClass = $boundTemplateType(java.({java.lang.String}), "style=type, class")$(::java::allocate);
            $boundTemplateType(java.({java.lang.String}), "style=type, class")$ source = nullptr;
            $boundTemplateType(java.({int}), "style=type, class")$ line = -1;

            if (!frame_source.empty() && frame_line > 0 && frame_line <= 0x7fffffffu) {
              source = $boundTemplateType(java.({java.lang.String}), "style=type, class")$(::java::allocate, frame_source);
              line = static_cast<$boundTemplateType(java.({int}), "style=type, class")$>(frame_line);
            }

            traceElements.push_back($boundTemplateType(java.({java.lang.StackTraceElement}), "style=type, class")$(
                ::java::allocate,
                ::std::move(declaringClass),
                ::std::move(method),
                ::std::move(source),
                line));
          }
        }
      includes:
        implementation:
        - boost/stacktrace/stacktrace.hpp
        - boost/stacktrace/frame.hpp
        - utility
    - type: method
      name: fillStackTrace
      arguments:
      - name: skip
        type:
          cxx: ::std::size_t
          includes:
            declaration:
            - cstddef
      doc_string: |
        \brief Fill the stack trace.
        \param skip The number of levels to skip.
        This is counted relative to the call-site of this function.
      body: |
        // We add 1 to the skip depth, to skip this function.
        fillStackTrace(skip + 1u, 128);
    - type: method
      name: fillStackTrace
      doc_string: |
        \brief Fill the stack trace.
      body: |
        // We add 1 to the skip depth, to skip this function.
        fillStackTrace(1);
    - type: method
      name: stackTraceString
      const: true
      return:
        cxx: ::std::string
        includes:
          declaration:
          - string
      doc_string: |
        \brief Retrieve a string containing the stack trace.
        \returns A string containing the stack trace.
      body: |
        ::std::ostringstream oss;
        writeStackTrace(oss);
        return ::std::move(oss).str();
      includes:
        implementation:
        - sstream
        - utility
    - type: method
      name: writeStackTrace
      const: true
      arguments:
      - name: out
        type:
          cxx: ::std::ostream&
          includes:
            declaration:
            - iosfwd
            implementation:
            - ostream
      return:
        cxx: ::std::ostream&
        includes:
          declaration:
          - iosfwd
          implementation:
          - ostream
      doc_string: |
        \brief Write the stack trace of this throwable.
        \note Writes *only* the stack trace, nothing else.
        \param[out] out Stream to write the stack trace to.
        \returns \p out
      body: |
        using namespace ::std::string_view_literals;

        return writeStackTrace(out, $u8StringView("")$);
      includes:
        implementation:
        - string_view
    - type: method
      name: writeStackTrace
      const: true
      arguments:
      - name: out
        type:
          cxx: ::std::ostream&
          includes:
            declaration:
            - iosfwd
            implementation:
            - ostream
      - name: indent
        type:
          cxx: ::std::string_view
          includes:
            declaration:
            - string_view
      return:
        cxx: ::std::ostream&
        includes:
          declaration:
          - iosfwd
          implementation:
          - ostream
      doc_string: |
        \brief Write the stack trace of this throwable.
        \note Writes *only* the stack trace, nothing else.
        \param[out] out Stream to write the stack trace to.
        \param[in] indent Indentation string to apply before each line of the stack trace.
        \returns \p out
      body: |
        using namespace ::std::string_view_literals;

        if (stackTrace != nullptr) {
          for (const auto frame : stackTrace) {
            out << indent;

            if (frame == nullptr) {
              out << $u8StringView("(skipped frame)")$;
            } else {
              const auto declaringClass = frame->declaringClass();
              const auto methodName = frame->methodName();
              const auto fileName = frame->fileName();

              if (declaringClass != nullptr && !declaringClass->empty())
                out << declaringClass->value() << $u8StringView(".")$;
              if (methodName != nullptr && !methodName->empty())
                out << methodName->value();
              else
                out << $u8StringView("(unknown method)")$;
              if (frame->nativeMethod())
                out << $u8StringView(" (native method)")$;

              out << $u8StringView(" ")$; // Separator.

              if (fileName == nullptr || fileName->empty())
                out << $u8StringView("(Unknown Source)")$;
              else
                out << $u8StringView("(")$ << fileName->value() << $u8StringView(":")$ << frame->lineNumber() << $u8StringView(")")$;
            }

            out << $u8StringView("\n")$;
          }
        }

        return out;
      includes:
        implementation:
        - string_view
    src_raw: |
      // For boost::stacktrace.
      #ifndef _GNU_SOURCE
      #define _GNU_SOURCE
      #endif
