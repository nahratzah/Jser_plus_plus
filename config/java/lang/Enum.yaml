---
rules:
# Specialize all __decoder__ implementations for enum.
- predicate:
    interface: false
    abstract: false
    class: true
    inherits:
    - java.lang.Enum
  friends:
  - cxx: ::java::serialization::module
    includes:
      declaration:
      - java/serialization/module_fwd.h
  suppress:
  - java.io.Serializable/__decoder__
  members:
  - type: method
    name: __decoder__
    static: true
    visibility: private
    arguments:
    - name: ctx
      type:
        cxx: ::java::serialization::decoder_ctx&
        includes:
          declaration:
          - java/serialization/decoder_fwd.h
    - name: raw_stream_elem
      type:
        cxx: ::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>
        includes:
          declaration:
          - cycle_ptr/cycle_ptr.h
          - java/serialization/type_def_fwd.h
          implementation:
          - java/serialization/encdec.h
    return:
      cxx: ::cycle_ptr::cycle_gptr<::java::serialization::decoder>
      includes:
        declaration:
        - cycle_ptr/cycle_ptr.h
        - java/serialization/decoder_fwd.h
    body: |
      class decoder_impl final
      : public ::java::serialization::decoder
      {
       public:
        decoder_impl(::java::serialization::decoder_ctx& ctx, cycle_ptr::cycle_gptr<const ::java::serialization::stream::new_enum> data)
        : decoder(ctx),
          data_(std::move(data))
        {
          if (data_ == nullptr) throw ::java::serialization::decoding_error("incorrectly typed stream element");
        }

        ~decoder_impl() noexcept override = default;

        auto init() -> ::java::lang::Object override {
          using namespace ::std::string_view_literals;

          if (data_->value == nullptr) throw ::java::serialization::decoding_error("enum identifier is null");

          $ model.enumValues
          : {value|if (*data_->value == $u16StringView(value.name)$) return $erasedType(model)$::$value.remappedName$();}
          ; anchor, separator = "\n"$

          throw ::java::serialization::decoding_error("unrecognized enum value");
        }

        auto init_comparable() -> dependent_set override {
          return dependent_set();
        }

        auto complete() -> dependent_set override {
          return dependent_set();
        }

       private:
        cycle_ptr::cycle_member_ptr<const ::java::serialization::stream::new_enum> data_;
      };

      return ::cycle_ptr::make_cycle<decoder_impl>(
          ctx,
          ::std::dynamic_pointer_cast<const ::java::serialization::stream::new_enum>(raw_stream_elem));
    includes:
      implementation:
      - java/serialization/encdec.h
      - java/serialization/decoder.h
      - java/serialization/exception.h
      - string_view

# Implement __encoder__ for enums.
- predicate:
    interface: false
    abstract: false
    class: true
    inherits:
    - java.lang.Enum
  suppress:
  - java.io.Serializable/__encoder__
  members:
  - type: method
    name: __encoder__
    visibility: private
    override: true
    final: true
    const: true
    covariant_return: false
    return:
      cxx: ::cycle_ptr::cycle_gptr<const ::java::serialization::stream::stream_element>
    arguments:
    - name: handler_
      type:
        cxx: ::java::serialization::cycle_handler&
    includes:
      declaration:
      - java/serialization/encdec.h
      - cycle_ptr/cycle_ptr.h
      - java/serialization/type_def_fwd.h
      implementation:
      - java/serialization/type_def.h
      - java/serialization/encdec.h
    body: |
      using namespace ::java::serialization::stream;
      using conversion_type = ::std::wstring_convert<
            std::codecvt_utf8_utf16<char16_t>,
            char16_t>;

      return handler_.template encode_obj<new_enum>(
          this->shared_from_this(this),
          [this](::java::serialization::cycle_handler& handler, new_enum& obj) {
            obj.type = $erasedType(model)$::__serializable_class__(handler);

            if constexpr(::std::is_constructible_v<std::string, std::string_view>) {
              obj.value = handler.encode_str(std::string(to_string(value)));
            } else {
              const auto& value_str = to_string(value);
              obj.value = handler.encode_str(std::string(value_str.begin(), value_str.end()));
            }
          });
    includes:
      implementation:
      - string
      - string_view
      - type_traits
      - java/serialization/type_def.h

# Implement values() for enums.
- predicate:
    interface: false
    abstract: false
    class: true
    inherits:
    - java.lang.Enum
  members:
  - type: method
    name: values
    static: true
    return:
      cxx: std::vector<$boundTemplateType(java.(model.name), "style=type, class")$>
      includes:
        declaration:
        - vector
    doc_string: |
      \brief Retrieve all enum values.
      \details All values of this enum.
      \returns Vector of enums.
    body: |
      return { $ model.enumValues
               : {v | $v.remappedName$()}
               ; anchor, wrap = "\n", separator = ", "$ };


classes:
  java.lang.Enum<E>:
    dev_mode: false
    suppress:
    - java.io.Serializable/__encoder__
    members:
    - type: constructor
      visibility: protected
